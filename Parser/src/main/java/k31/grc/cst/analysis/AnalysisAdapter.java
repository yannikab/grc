/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.analysis;

import java.util.*;
import k31.grc.cst.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermExpression(ATermExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyTerm(AMultiplyTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharacterFactor(ACharacterFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesisFactor(AParenthesisFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusFactor(APlusFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusFactor(AMinusFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALValueFactor(ALValueFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallFactor(AFunctionCallFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIndexedLValue(AIndexedLValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLValue(AStringLValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierLValue(AIdentifierLValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionArgs(AFunctionArgs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionArgsMore(AFunctionArgsMore node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrOpExpressionL(AOrOpExpressionL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermLExpressionL(ATermLExpressionL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndOpTermL(AAndOpTermL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorLTermL(AFactorLTermL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotOpFactorL(ANotOpFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenthesisFactorL(AParenthesisFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualFactorL(AEqualFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualFactorL(ANotEqualFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterThanFactorL(AGreaterThanFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessThanFactorL(ALessThanFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterEqualFactorL(AGreaterEqualFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessEqualFactorL(ALessEqualFactorL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemicolonStatement(ASemicolonStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemicolonStatementElse(ASemicolonStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStatementElse(AAssignStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStatementElse(ABlockStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallStatementElse(AFunctionCallStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStatementElse(AReturnStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatementElse(AIfStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatementElse(AWhileStatementElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASemicolonStmt(ASemicolonStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionCallStmt(AFunctionCallStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThenIfStmt(AThenIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThenElseIfStmt(AThenElseIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmtElse(AIfStmtElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmtElse(AWhileStmtElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADataReturnType(ADataReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANothingReturnType(ANothingReturnType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayNoDim(AArrayNoDim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayDim(AArrayDim node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAType(AType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarMore(AVarMore node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFparDef(AFparDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParMore(AParMore node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncParams(AFuncParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFparDefMore(AFparDefMore node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncLocalDef(AFuncLocalDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarLocalDef(AVarLocalDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyVar(TKeyVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyChar(TKeyChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyInt(TKeyInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyIf(TKeyIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyThen(TKeyThen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyElse(TKeyElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyWhile(TKeyWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyDo(TKeyDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyFun(TKeyFun node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyRef(TKeyRef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyNothing(TKeyNothing node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKeyReturn(TKeyReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperPlus(TOperPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperMinus(TOperMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperMul(TOperMul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperDiv(TOperDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperMod(TOperMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperEq(TOperEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperNe(TOperNe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperLt(TOperLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperGt(TOperGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperLe(TOperLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperGe(TOperGe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperAnd(TOperAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperOr(TOperOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOperNot(TOperNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepLpar(TSepLpar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepRpar(TSepRpar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepLbrack(TSepLbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepRbrack(TSepRbrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepLbrace(TSepLbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepRbrace(TSepRbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepComma(TSepComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepColon(TSepColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepSemi(TSepSemi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSepAssign(TSepAssign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerError(TIntegerError node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCharacter(TCharacter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentLine(TCommentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentStart(TCommentStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentEnd(TCommentEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentContent(TCommentContent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
