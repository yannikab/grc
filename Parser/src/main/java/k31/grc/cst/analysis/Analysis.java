/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.analysis;

import k31.grc.cst.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseATermExpression(ATermExpression node);
    void caseAMultiplyTerm(AMultiplyTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModTerm(AModTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAIntegerFactor(AIntegerFactor node);
    void caseACharacterFactor(ACharacterFactor node);
    void caseAParenthesisFactor(AParenthesisFactor node);
    void caseAPlusFactor(APlusFactor node);
    void caseAMinusFactor(AMinusFactor node);
    void caseALValueFactor(ALValueFactor node);
    void caseAFunctionCallFactor(AFunctionCallFactor node);
    void caseAIndexedLValue(AIndexedLValue node);
    void caseAStringLValue(AStringLValue node);
    void caseAIdentifierLValue(AIdentifierLValue node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAFunctionArgs(AFunctionArgs node);
    void caseAFunctionArgsMore(AFunctionArgsMore node);
    void caseAOrOpExpressionL(AOrOpExpressionL node);
    void caseATermLExpressionL(ATermLExpressionL node);
    void caseAAndOpTermL(AAndOpTermL node);
    void caseAFactorLTermL(AFactorLTermL node);
    void caseANotOpFactorL(ANotOpFactorL node);
    void caseAParenthesisFactorL(AParenthesisFactorL node);
    void caseAEqualFactorL(AEqualFactorL node);
    void caseANotEqualFactorL(ANotEqualFactorL node);
    void caseAGreaterThanFactorL(AGreaterThanFactorL node);
    void caseALessThanFactorL(ALessThanFactorL node);
    void caseAGreaterEqualFactorL(AGreaterEqualFactorL node);
    void caseALessEqualFactorL(ALessEqualFactorL node);
    void caseASemicolonStatement(ASemicolonStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseASemicolonStatementElse(ASemicolonStatementElse node);
    void caseAAssignStatementElse(AAssignStatementElse node);
    void caseABlockStatementElse(ABlockStatementElse node);
    void caseAFunctionCallStatementElse(AFunctionCallStatementElse node);
    void caseAReturnStatementElse(AReturnStatementElse node);
    void caseAIfStatementElse(AIfStatementElse node);
    void caseAWhileStatementElse(AWhileStatementElse node);
    void caseASemicolonStmt(ASemicolonStmt node);
    void caseAAssignStmt(AAssignStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAFunctionCallStmt(AFunctionCallStmt node);
    void caseAReturnStmt(AReturnStmt node);
    void caseAThenIfStmt(AThenIfStmt node);
    void caseAThenElseIfStmt(AThenElseIfStmt node);
    void caseAIfStmtElse(AIfStmtElse node);
    void caseAWhileStmt(AWhileStmt node);
    void caseAWhileStmtElse(AWhileStmtElse node);
    void caseACharDataType(ACharDataType node);
    void caseAIntDataType(AIntDataType node);
    void caseADataReturnType(ADataReturnType node);
    void caseANothingReturnType(ANothingReturnType node);
    void caseAArrayNoDim(AArrayNoDim node);
    void caseAArrayDim(AArrayDim node);
    void caseAType(AType node);
    void caseAVarDef(AVarDef node);
    void caseAVarMore(AVarMore node);
    void caseAFparType(AFparType node);
    void caseAFparDef(AFparDef node);
    void caseAParMore(AParMore node);
    void caseAHeader(AHeader node);
    void caseAFuncParams(AFuncParams node);
    void caseAFparDefMore(AFparDefMore node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAFuncDef(AFuncDef node);
    void caseAFuncLocalDef(AFuncLocalDef node);
    void caseAFuncDeclLocalDef(AFuncDeclLocalDef node);
    void caseAVarLocalDef(AVarLocalDef node);

    void caseTKeyVar(TKeyVar node);
    void caseTKeyChar(TKeyChar node);
    void caseTKeyInt(TKeyInt node);
    void caseTKeyIf(TKeyIf node);
    void caseTKeyThen(TKeyThen node);
    void caseTKeyElse(TKeyElse node);
    void caseTKeyWhile(TKeyWhile node);
    void caseTKeyDo(TKeyDo node);
    void caseTKeyFun(TKeyFun node);
    void caseTKeyRef(TKeyRef node);
    void caseTKeyNothing(TKeyNothing node);
    void caseTKeyReturn(TKeyReturn node);
    void caseTOperPlus(TOperPlus node);
    void caseTOperMinus(TOperMinus node);
    void caseTOperMul(TOperMul node);
    void caseTOperDiv(TOperDiv node);
    void caseTOperMod(TOperMod node);
    void caseTOperEq(TOperEq node);
    void caseTOperNe(TOperNe node);
    void caseTOperLt(TOperLt node);
    void caseTOperGt(TOperGt node);
    void caseTOperLe(TOperLe node);
    void caseTOperGe(TOperGe node);
    void caseTOperAnd(TOperAnd node);
    void caseTOperOr(TOperOr node);
    void caseTOperNot(TOperNot node);
    void caseTSepLpar(TSepLpar node);
    void caseTSepRpar(TSepRpar node);
    void caseTSepLbrack(TSepLbrack node);
    void caseTSepRbrack(TSepRbrack node);
    void caseTSepLbrace(TSepLbrace node);
    void caseTSepRbrace(TSepRbrace node);
    void caseTSepComma(TSepComma node);
    void caseTSepColon(TSepColon node);
    void caseTSepSemi(TSepSemi node);
    void caseTSepAssign(TSepAssign node);
    void caseTIdentifier(TIdentifier node);
    void caseTInteger(TInteger node);
    void caseTIntegerError(TIntegerError node);
    void caseTCharacter(TCharacter node);
    void caseTString(TString node);
    void caseTWhitespace(TWhitespace node);
    void caseTCommentLine(TCommentLine node);
    void caseTCommentStart(TCommentStart node);
    void caseTCommentEnd(TCommentEnd node);
    void caseTCommentContent(TCommentContent node);
    void caseEOF(EOF node);
}
