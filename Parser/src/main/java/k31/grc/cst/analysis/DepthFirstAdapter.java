/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.analysis;

import java.util.*;
import k31.grc.cst.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperPlus() != null)
        {
            node.getOperPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperMinus() != null)
        {
            node.getOperMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inATermExpression(ATermExpression node)
    {
        defaultIn(node);
    }

    public void outATermExpression(ATermExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpression(ATermExpression node)
    {
        inATermExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpression(node);
    }

    public void inAMultiplyTerm(AMultiplyTerm node)
    {
        defaultIn(node);
    }

    public void outAMultiplyTerm(AMultiplyTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyTerm(AMultiplyTerm node)
    {
        inAMultiplyTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getOperMul() != null)
        {
            node.getOperMul().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultiplyTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getOperDiv() != null)
        {
            node.getOperDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivTerm(node);
    }

    public void inAModTerm(AModTerm node)
    {
        defaultIn(node);
    }

    public void outAModTerm(AModTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        inAModTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getOperMod() != null)
        {
            node.getOperMod().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAModTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAIntegerFactor(AIntegerFactor node)
    {
        defaultIn(node);
    }

    public void outAIntegerFactor(AIntegerFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerFactor(AIntegerFactor node)
    {
        inAIntegerFactor(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerFactor(node);
    }

    public void inACharacterFactor(ACharacterFactor node)
    {
        defaultIn(node);
    }

    public void outACharacterFactor(ACharacterFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharacterFactor(ACharacterFactor node)
    {
        inACharacterFactor(node);
        if(node.getCharacter() != null)
        {
            node.getCharacter().apply(this);
        }
        outACharacterFactor(node);
    }

    public void inAParenthesisFactor(AParenthesisFactor node)
    {
        defaultIn(node);
    }

    public void outAParenthesisFactor(AParenthesisFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesisFactor(AParenthesisFactor node)
    {
        inAParenthesisFactor(node);
        if(node.getSepLpar() != null)
        {
            node.getSepLpar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSepRpar() != null)
        {
            node.getSepRpar().apply(this);
        }
        outAParenthesisFactor(node);
    }

    public void inAPlusFactor(APlusFactor node)
    {
        defaultIn(node);
    }

    public void outAPlusFactor(APlusFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusFactor(APlusFactor node)
    {
        inAPlusFactor(node);
        if(node.getOperPlus() != null)
        {
            node.getOperPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPlusFactor(node);
    }

    public void inAMinusFactor(AMinusFactor node)
    {
        defaultIn(node);
    }

    public void outAMinusFactor(AMinusFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusFactor(AMinusFactor node)
    {
        inAMinusFactor(node);
        if(node.getOperMinus() != null)
        {
            node.getOperMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinusFactor(node);
    }

    public void inALValueFactor(ALValueFactor node)
    {
        defaultIn(node);
    }

    public void outALValueFactor(ALValueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueFactor(ALValueFactor node)
    {
        inALValueFactor(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALValueFactor(node);
    }

    public void inAFunctionCallFactor(AFunctionCallFactor node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallFactor(AFunctionCallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallFactor(AFunctionCallFactor node)
    {
        inAFunctionCallFactor(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallFactor(node);
    }

    public void inAIndexedLValue(AIndexedLValue node)
    {
        defaultIn(node);
    }

    public void outAIndexedLValue(AIndexedLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndexedLValue(AIndexedLValue node)
    {
        inAIndexedLValue(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getSepLbrack() != null)
        {
            node.getSepLbrack().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSepRbrack() != null)
        {
            node.getSepRbrack().apply(this);
        }
        outAIndexedLValue(node);
    }

    public void inAStringLValue(AStringLValue node)
    {
        defaultIn(node);
    }

    public void outAStringLValue(AStringLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLValue(AStringLValue node)
    {
        inAStringLValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringLValue(node);
    }

    public void inAIdentifierLValue(AIdentifierLValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierLValue(AIdentifierLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierLValue(AIdentifierLValue node)
    {
        inAIdentifierLValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierLValue(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSepLpar() != null)
        {
            node.getSepLpar().apply(this);
        }
        if(node.getFunctionArgs() != null)
        {
            node.getFunctionArgs().apply(this);
        }
        if(node.getSepRpar() != null)
        {
            node.getSepRpar().apply(this);
        }
        outAFunctionCall(node);
    }

    public void inAFunctionArgs(AFunctionArgs node)
    {
        defaultIn(node);
    }

    public void outAFunctionArgs(AFunctionArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionArgs(AFunctionArgs node)
    {
        inAFunctionArgs(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PFunctionArgsMore> copy = new ArrayList<PFunctionArgsMore>(node.getFunctionArgsMore());
            for(PFunctionArgsMore e : copy)
            {
                e.apply(this);
            }
        }
        outAFunctionArgs(node);
    }

    public void inAFunctionArgsMore(AFunctionArgsMore node)
    {
        defaultIn(node);
    }

    public void outAFunctionArgsMore(AFunctionArgsMore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionArgsMore(AFunctionArgsMore node)
    {
        inAFunctionArgsMore(node);
        if(node.getSepComma() != null)
        {
            node.getSepComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFunctionArgsMore(node);
    }

    public void inAOrOpExpressionL(AOrOpExpressionL node)
    {
        defaultIn(node);
    }

    public void outAOrOpExpressionL(AOrOpExpressionL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOpExpressionL(AOrOpExpressionL node)
    {
        inAOrOpExpressionL(node);
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getOperOr() != null)
        {
            node.getOperOr().apply(this);
        }
        if(node.getTermL() != null)
        {
            node.getTermL().apply(this);
        }
        outAOrOpExpressionL(node);
    }

    public void inATermLExpressionL(ATermLExpressionL node)
    {
        defaultIn(node);
    }

    public void outATermLExpressionL(ATermLExpressionL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermLExpressionL(ATermLExpressionL node)
    {
        inATermLExpressionL(node);
        if(node.getTermL() != null)
        {
            node.getTermL().apply(this);
        }
        outATermLExpressionL(node);
    }

    public void inAAndOpTermL(AAndOpTermL node)
    {
        defaultIn(node);
    }

    public void outAAndOpTermL(AAndOpTermL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOpTermL(AAndOpTermL node)
    {
        inAAndOpTermL(node);
        if(node.getTermL() != null)
        {
            node.getTermL().apply(this);
        }
        if(node.getOperAnd() != null)
        {
            node.getOperAnd().apply(this);
        }
        if(node.getFactorL() != null)
        {
            node.getFactorL().apply(this);
        }
        outAAndOpTermL(node);
    }

    public void inAFactorLTermL(AFactorLTermL node)
    {
        defaultIn(node);
    }

    public void outAFactorLTermL(AFactorLTermL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorLTermL(AFactorLTermL node)
    {
        inAFactorLTermL(node);
        if(node.getFactorL() != null)
        {
            node.getFactorL().apply(this);
        }
        outAFactorLTermL(node);
    }

    public void inANotOpFactorL(ANotOpFactorL node)
    {
        defaultIn(node);
    }

    public void outANotOpFactorL(ANotOpFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotOpFactorL(ANotOpFactorL node)
    {
        inANotOpFactorL(node);
        if(node.getOperNot() != null)
        {
            node.getOperNot().apply(this);
        }
        if(node.getFactorL() != null)
        {
            node.getFactorL().apply(this);
        }
        outANotOpFactorL(node);
    }

    public void inAParenthesisFactorL(AParenthesisFactorL node)
    {
        defaultIn(node);
    }

    public void outAParenthesisFactorL(AParenthesisFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesisFactorL(AParenthesisFactorL node)
    {
        inAParenthesisFactorL(node);
        if(node.getSepLpar() != null)
        {
            node.getSepLpar().apply(this);
        }
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getSepRpar() != null)
        {
            node.getSepRpar().apply(this);
        }
        outAParenthesisFactorL(node);
    }

    public void inAEqualFactorL(AEqualFactorL node)
    {
        defaultIn(node);
    }

    public void outAEqualFactorL(AEqualFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualFactorL(AEqualFactorL node)
    {
        inAEqualFactorL(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOperEq() != null)
        {
            node.getOperEq().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAEqualFactorL(node);
    }

    public void inANotEqualFactorL(ANotEqualFactorL node)
    {
        defaultIn(node);
    }

    public void outANotEqualFactorL(ANotEqualFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualFactorL(ANotEqualFactorL node)
    {
        inANotEqualFactorL(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOperNe() != null)
        {
            node.getOperNe().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outANotEqualFactorL(node);
    }

    public void inAGreaterThanFactorL(AGreaterThanFactorL node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanFactorL(AGreaterThanFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanFactorL(AGreaterThanFactorL node)
    {
        inAGreaterThanFactorL(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOperGt() != null)
        {
            node.getOperGt().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAGreaterThanFactorL(node);
    }

    public void inALessThanFactorL(ALessThanFactorL node)
    {
        defaultIn(node);
    }

    public void outALessThanFactorL(ALessThanFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanFactorL(ALessThanFactorL node)
    {
        inALessThanFactorL(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOperLt() != null)
        {
            node.getOperLt().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALessThanFactorL(node);
    }

    public void inAGreaterEqualFactorL(AGreaterEqualFactorL node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualFactorL(AGreaterEqualFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualFactorL(AGreaterEqualFactorL node)
    {
        inAGreaterEqualFactorL(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOperGe() != null)
        {
            node.getOperGe().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAGreaterEqualFactorL(node);
    }

    public void inALessEqualFactorL(ALessEqualFactorL node)
    {
        defaultIn(node);
    }

    public void outALessEqualFactorL(ALessEqualFactorL node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualFactorL(ALessEqualFactorL node)
    {
        inALessEqualFactorL(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getOperLe() != null)
        {
            node.getOperLe().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outALessEqualFactorL(node);
    }

    public void inASemicolonStatement(ASemicolonStatement node)
    {
        defaultIn(node);
    }

    public void outASemicolonStatement(ASemicolonStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonStatement(ASemicolonStatement node)
    {
        inASemicolonStatement(node);
        if(node.getSemicolonStmt() != null)
        {
            node.getSemicolonStmt().apply(this);
        }
        outASemicolonStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getAssignStmt() != null)
        {
            node.getAssignStmt().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        if(node.getBlockStmt() != null)
        {
            node.getBlockStmt().apply(this);
        }
        outABlockStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCallStmt() != null)
        {
            node.getFunctionCallStmt().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getReturnStmt() != null)
        {
            node.getReturnStmt().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhileStmt() != null)
        {
            node.getWhileStmt().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inASemicolonStatementElse(ASemicolonStatementElse node)
    {
        defaultIn(node);
    }

    public void outASemicolonStatementElse(ASemicolonStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonStatementElse(ASemicolonStatementElse node)
    {
        inASemicolonStatementElse(node);
        if(node.getSemicolonStmt() != null)
        {
            node.getSemicolonStmt().apply(this);
        }
        outASemicolonStatementElse(node);
    }

    public void inAAssignStatementElse(AAssignStatementElse node)
    {
        defaultIn(node);
    }

    public void outAAssignStatementElse(AAssignStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatementElse(AAssignStatementElse node)
    {
        inAAssignStatementElse(node);
        if(node.getAssignStmt() != null)
        {
            node.getAssignStmt().apply(this);
        }
        outAAssignStatementElse(node);
    }

    public void inABlockStatementElse(ABlockStatementElse node)
    {
        defaultIn(node);
    }

    public void outABlockStatementElse(ABlockStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatementElse(ABlockStatementElse node)
    {
        inABlockStatementElse(node);
        if(node.getBlockStmt() != null)
        {
            node.getBlockStmt().apply(this);
        }
        outABlockStatementElse(node);
    }

    public void inAFunctionCallStatementElse(AFunctionCallStatementElse node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatementElse(AFunctionCallStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallStatementElse(AFunctionCallStatementElse node)
    {
        inAFunctionCallStatementElse(node);
        if(node.getFunctionCallStmt() != null)
        {
            node.getFunctionCallStmt().apply(this);
        }
        outAFunctionCallStatementElse(node);
    }

    public void inAReturnStatementElse(AReturnStatementElse node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementElse(AReturnStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStatementElse(AReturnStatementElse node)
    {
        inAReturnStatementElse(node);
        if(node.getReturnStmt() != null)
        {
            node.getReturnStmt().apply(this);
        }
        outAReturnStatementElse(node);
    }

    public void inAIfStatementElse(AIfStatementElse node)
    {
        defaultIn(node);
    }

    public void outAIfStatementElse(AIfStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementElse(AIfStatementElse node)
    {
        inAIfStatementElse(node);
        if(node.getIfStmtElse() != null)
        {
            node.getIfStmtElse().apply(this);
        }
        outAIfStatementElse(node);
    }

    public void inAWhileStatementElse(AWhileStatementElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementElse(AWhileStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementElse(AWhileStatementElse node)
    {
        inAWhileStatementElse(node);
        if(node.getWhileStmtElse() != null)
        {
            node.getWhileStmtElse().apply(this);
        }
        outAWhileStatementElse(node);
    }

    public void inASemicolonStmt(ASemicolonStmt node)
    {
        defaultIn(node);
    }

    public void outASemicolonStmt(ASemicolonStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonStmt(ASemicolonStmt node)
    {
        inASemicolonStmt(node);
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        outASemicolonStmt(node);
    }

    public void inAAssignStmt(AAssignStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignStmt(AAssignStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStmt(AAssignStmt node)
    {
        inAAssignStmt(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getSepAssign() != null)
        {
            node.getSepAssign().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        outAAssignStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getSepLbrace() != null)
        {
            node.getSepLbrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSepRbrace() != null)
        {
            node.getSepRbrace().apply(this);
        }
        outABlockStmt(node);
    }

    public void inAFunctionCallStmt(AFunctionCallStmt node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStmt(AFunctionCallStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCallStmt(AFunctionCallStmt node)
    {
        inAFunctionCallStmt(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        outAFunctionCallStmt(node);
    }

    public void inAReturnStmt(AReturnStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnStmt(AReturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStmt(AReturnStmt node)
    {
        inAReturnStmt(node);
        if(node.getKeyReturn() != null)
        {
            node.getKeyReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        outAReturnStmt(node);
    }

    public void inAThenIfStmt(AThenIfStmt node)
    {
        defaultIn(node);
    }

    public void outAThenIfStmt(AThenIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThenIfStmt(AThenIfStmt node)
    {
        inAThenIfStmt(node);
        if(node.getKeyIf() != null)
        {
            node.getKeyIf().apply(this);
        }
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getKeyThen() != null)
        {
            node.getKeyThen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAThenIfStmt(node);
    }

    public void inAThenElseIfStmt(AThenElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outAThenElseIfStmt(AThenElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThenElseIfStmt(AThenElseIfStmt node)
    {
        inAThenElseIfStmt(node);
        if(node.getKeyIf() != null)
        {
            node.getKeyIf().apply(this);
        }
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getKeyThen() != null)
        {
            node.getKeyThen().apply(this);
        }
        if(node.getStatementElse() != null)
        {
            node.getStatementElse().apply(this);
        }
        if(node.getKeyElse() != null)
        {
            node.getKeyElse().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAThenElseIfStmt(node);
    }

    public void inAIfStmtElse(AIfStmtElse node)
    {
        defaultIn(node);
    }

    public void outAIfStmtElse(AIfStmtElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtElse(AIfStmtElse node)
    {
        inAIfStmtElse(node);
        if(node.getKeyIf() != null)
        {
            node.getKeyIf().apply(this);
        }
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getKeyThen() != null)
        {
            node.getKeyThen().apply(this);
        }
        if(node.getT() != null)
        {
            node.getT().apply(this);
        }
        if(node.getKeyElse() != null)
        {
            node.getKeyElse().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAIfStmtElse(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getKeyWhile() != null)
        {
            node.getKeyWhile().apply(this);
        }
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getKeyDo() != null)
        {
            node.getKeyDo().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAWhileStmtElse(AWhileStmtElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtElse(AWhileStmtElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtElse(AWhileStmtElse node)
    {
        inAWhileStmtElse(node);
        if(node.getKeyWhile() != null)
        {
            node.getKeyWhile().apply(this);
        }
        if(node.getExpressionL() != null)
        {
            node.getExpressionL().apply(this);
        }
        if(node.getKeyDo() != null)
        {
            node.getKeyDo().apply(this);
        }
        if(node.getStatementElse() != null)
        {
            node.getStatementElse().apply(this);
        }
        outAWhileStmtElse(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getKeyChar() != null)
        {
            node.getKeyChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getKeyInt() != null)
        {
            node.getKeyInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inADataReturnType(ADataReturnType node)
    {
        defaultIn(node);
    }

    public void outADataReturnType(ADataReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataReturnType(ADataReturnType node)
    {
        inADataReturnType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADataReturnType(node);
    }

    public void inANothingReturnType(ANothingReturnType node)
    {
        defaultIn(node);
    }

    public void outANothingReturnType(ANothingReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingReturnType(ANothingReturnType node)
    {
        inANothingReturnType(node);
        if(node.getKeyNothing() != null)
        {
            node.getKeyNothing().apply(this);
        }
        outANothingReturnType(node);
    }

    public void inAArrayNoDim(AArrayNoDim node)
    {
        defaultIn(node);
    }

    public void outAArrayNoDim(AArrayNoDim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayNoDim(AArrayNoDim node)
    {
        inAArrayNoDim(node);
        if(node.getSepLbrack() != null)
        {
            node.getSepLbrack().apply(this);
        }
        if(node.getSepRbrack() != null)
        {
            node.getSepRbrack().apply(this);
        }
        outAArrayNoDim(node);
    }

    public void inAArrayDim(AArrayDim node)
    {
        defaultIn(node);
    }

    public void outAArrayDim(AArrayDim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayDim(AArrayDim node)
    {
        inAArrayDim(node);
        if(node.getSepLbrack() != null)
        {
            node.getSepLbrack().apply(this);
        }
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        if(node.getSepRbrack() != null)
        {
            node.getSepRbrack().apply(this);
        }
        outAArrayDim(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        {
            List<PArrayDim> copy = new ArrayList<PArrayDim>(node.getArrayDim());
            for(PArrayDim e : copy)
            {
                e.apply(this);
            }
        }
        outAType(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getKeyVar() != null)
        {
            node.getKeyVar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PVarMore> copy = new ArrayList<PVarMore>(node.getVarMore());
            for(PVarMore e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSepColon() != null)
        {
            node.getSepColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        outAVarDef(node);
    }

    public void inAVarMore(AVarMore node)
    {
        defaultIn(node);
    }

    public void outAVarMore(AVarMore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarMore(AVarMore node)
    {
        inAVarMore(node);
        if(node.getSepComma() != null)
        {
            node.getSepComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarMore(node);
    }

    public void inAFparType(AFparType node)
    {
        defaultIn(node);
    }

    public void outAFparType(AFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        inAFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getArrayNoDim() != null)
        {
            node.getArrayNoDim().apply(this);
        }
        {
            List<PArrayDim> copy = new ArrayList<PArrayDim>(node.getArrayDim());
            for(PArrayDim e : copy)
            {
                e.apply(this);
            }
        }
        outAFparType(node);
    }

    public void inAFparDef(AFparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef(AFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef(AFparDef node)
    {
        inAFparDef(node);
        if(node.getKeyRef() != null)
        {
            node.getKeyRef().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PParMore> copy = new ArrayList<PParMore>(node.getParMore());
            for(PParMore e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSepColon() != null)
        {
            node.getSepColon().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outAFparDef(node);
    }

    public void inAParMore(AParMore node)
    {
        defaultIn(node);
    }

    public void outAParMore(AParMore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParMore(AParMore node)
    {
        inAParMore(node);
        if(node.getSepComma() != null)
        {
            node.getSepComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParMore(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getKeyFun() != null)
        {
            node.getKeyFun().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSepLpar() != null)
        {
            node.getSepLpar().apply(this);
        }
        if(node.getFuncParams() != null)
        {
            node.getFuncParams().apply(this);
        }
        if(node.getSepRpar() != null)
        {
            node.getSepRpar().apply(this);
        }
        if(node.getSepColon() != null)
        {
            node.getSepColon().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        outAHeader(node);
    }

    public void inAFuncParams(AFuncParams node)
    {
        defaultIn(node);
    }

    public void outAFuncParams(AFuncParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncParams(AFuncParams node)
    {
        inAFuncParams(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        {
            List<PFparDefMore> copy = new ArrayList<PFparDefMore>(node.getFparDefMore());
            for(PFparDefMore e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncParams(node);
    }

    public void inAFparDefMore(AFparDefMore node)
    {
        defaultIn(node);
    }

    public void outAFparDefMore(AFparDefMore node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDefMore(AFparDefMore node)
    {
        inAFparDefMore(node);
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDefMore(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSepSemi() != null)
        {
            node.getSepSemi().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlockStmt() != null)
        {
            node.getBlockStmt().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAFuncLocalDef(AFuncLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncLocalDef(AFuncLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncLocalDef(AFuncLocalDef node)
    {
        inAFuncLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFuncLocalDef(node);
    }

    public void inAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        inAFuncDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclLocalDef(node);
    }

    public void inAVarLocalDef(AVarLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarLocalDef(AVarLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarLocalDef(AVarLocalDef node)
    {
        inAVarLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVarLocalDef(node);
    }
}
