/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.node;

import k31.grc.cst.analysis.*;

@SuppressWarnings("nls")
public final class AHeader extends PHeader
{
    private TKeyFun _keyFun_;
    private TIdentifier _identifier_;
    private TSepLpar _sepLpar_;
    private PFuncParams _funcParams_;
    private TSepRpar _sepRpar_;
    private TSepColon _sepColon_;
    private PReturnType _returnType_;

    public AHeader()
    {
        // Constructor
    }

    public AHeader(
        @SuppressWarnings("hiding") TKeyFun _keyFun_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TSepLpar _sepLpar_,
        @SuppressWarnings("hiding") PFuncParams _funcParams_,
        @SuppressWarnings("hiding") TSepRpar _sepRpar_,
        @SuppressWarnings("hiding") TSepColon _sepColon_,
        @SuppressWarnings("hiding") PReturnType _returnType_)
    {
        // Constructor
        setKeyFun(_keyFun_);

        setIdentifier(_identifier_);

        setSepLpar(_sepLpar_);

        setFuncParams(_funcParams_);

        setSepRpar(_sepRpar_);

        setSepColon(_sepColon_);

        setReturnType(_returnType_);

    }

    @Override
    public Object clone()
    {
        return new AHeader(
            cloneNode(this._keyFun_),
            cloneNode(this._identifier_),
            cloneNode(this._sepLpar_),
            cloneNode(this._funcParams_),
            cloneNode(this._sepRpar_),
            cloneNode(this._sepColon_),
            cloneNode(this._returnType_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeader(this);
    }

    public TKeyFun getKeyFun()
    {
        return this._keyFun_;
    }

    public void setKeyFun(TKeyFun node)
    {
        if(this._keyFun_ != null)
        {
            this._keyFun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyFun_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TSepLpar getSepLpar()
    {
        return this._sepLpar_;
    }

    public void setSepLpar(TSepLpar node)
    {
        if(this._sepLpar_ != null)
        {
            this._sepLpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sepLpar_ = node;
    }

    public PFuncParams getFuncParams()
    {
        return this._funcParams_;
    }

    public void setFuncParams(PFuncParams node)
    {
        if(this._funcParams_ != null)
        {
            this._funcParams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcParams_ = node;
    }

    public TSepRpar getSepRpar()
    {
        return this._sepRpar_;
    }

    public void setSepRpar(TSepRpar node)
    {
        if(this._sepRpar_ != null)
        {
            this._sepRpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sepRpar_ = node;
    }

    public TSepColon getSepColon()
    {
        return this._sepColon_;
    }

    public void setSepColon(TSepColon node)
    {
        if(this._sepColon_ != null)
        {
            this._sepColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sepColon_ = node;
    }

    public PReturnType getReturnType()
    {
        return this._returnType_;
    }

    public void setReturnType(PReturnType node)
    {
        if(this._returnType_ != null)
        {
            this._returnType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keyFun_)
            + toString(this._identifier_)
            + toString(this._sepLpar_)
            + toString(this._funcParams_)
            + toString(this._sepRpar_)
            + toString(this._sepColon_)
            + toString(this._returnType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keyFun_ == child)
        {
            this._keyFun_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._sepLpar_ == child)
        {
            this._sepLpar_ = null;
            return;
        }

        if(this._funcParams_ == child)
        {
            this._funcParams_ = null;
            return;
        }

        if(this._sepRpar_ == child)
        {
            this._sepRpar_ = null;
            return;
        }

        if(this._sepColon_ == child)
        {
            this._sepColon_ = null;
            return;
        }

        if(this._returnType_ == child)
        {
            this._returnType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keyFun_ == oldChild)
        {
            setKeyFun((TKeyFun) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._sepLpar_ == oldChild)
        {
            setSepLpar((TSepLpar) newChild);
            return;
        }

        if(this._funcParams_ == oldChild)
        {
            setFuncParams((PFuncParams) newChild);
            return;
        }

        if(this._sepRpar_ == oldChild)
        {
            setSepRpar((TSepRpar) newChild);
            return;
        }

        if(this._sepColon_ == oldChild)
        {
            setSepColon((TSepColon) newChild);
            return;
        }

        if(this._returnType_ == oldChild)
        {
            setReturnType((PReturnType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
