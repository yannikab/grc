/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.node;

import k31.grc.cst.analysis.*;

@SuppressWarnings("nls")
public final class AWhileStmtElse extends PWhileStmtElse
{
    private TKeyWhile _keyWhile_;
    private PExpressionL _expressionL_;
    private TKeyDo _keyDo_;
    private PStatementElse _statementElse_;

    public AWhileStmtElse()
    {
        // Constructor
    }

    public AWhileStmtElse(
        @SuppressWarnings("hiding") TKeyWhile _keyWhile_,
        @SuppressWarnings("hiding") PExpressionL _expressionL_,
        @SuppressWarnings("hiding") TKeyDo _keyDo_,
        @SuppressWarnings("hiding") PStatementElse _statementElse_)
    {
        // Constructor
        setKeyWhile(_keyWhile_);

        setExpressionL(_expressionL_);

        setKeyDo(_keyDo_);

        setStatementElse(_statementElse_);

    }

    @Override
    public Object clone()
    {
        return new AWhileStmtElse(
            cloneNode(this._keyWhile_),
            cloneNode(this._expressionL_),
            cloneNode(this._keyDo_),
            cloneNode(this._statementElse_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStmtElse(this);
    }

    public TKeyWhile getKeyWhile()
    {
        return this._keyWhile_;
    }

    public void setKeyWhile(TKeyWhile node)
    {
        if(this._keyWhile_ != null)
        {
            this._keyWhile_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyWhile_ = node;
    }

    public PExpressionL getExpressionL()
    {
        return this._expressionL_;
    }

    public void setExpressionL(PExpressionL node)
    {
        if(this._expressionL_ != null)
        {
            this._expressionL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressionL_ = node;
    }

    public TKeyDo getKeyDo()
    {
        return this._keyDo_;
    }

    public void setKeyDo(TKeyDo node)
    {
        if(this._keyDo_ != null)
        {
            this._keyDo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._keyDo_ = node;
    }

    public PStatementElse getStatementElse()
    {
        return this._statementElse_;
    }

    public void setStatementElse(PStatementElse node)
    {
        if(this._statementElse_ != null)
        {
            this._statementElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementElse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._keyWhile_)
            + toString(this._expressionL_)
            + toString(this._keyDo_)
            + toString(this._statementElse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._keyWhile_ == child)
        {
            this._keyWhile_ = null;
            return;
        }

        if(this._expressionL_ == child)
        {
            this._expressionL_ = null;
            return;
        }

        if(this._keyDo_ == child)
        {
            this._keyDo_ = null;
            return;
        }

        if(this._statementElse_ == child)
        {
            this._statementElse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._keyWhile_ == oldChild)
        {
            setKeyWhile((TKeyWhile) newChild);
            return;
        }

        if(this._expressionL_ == oldChild)
        {
            setExpressionL((PExpressionL) newChild);
            return;
        }

        if(this._keyDo_ == oldChild)
        {
            setKeyDo((TKeyDo) newChild);
            return;
        }

        if(this._statementElse_ == oldChild)
        {
            setStatementElse((PStatementElse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
