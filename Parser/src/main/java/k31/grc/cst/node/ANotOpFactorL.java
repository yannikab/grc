/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.node;

import k31.grc.cst.analysis.*;

@SuppressWarnings("nls")
public final class ANotOpFactorL extends PFactorL
{
    private TOperNot _operNot_;
    private PFactorL _factorL_;

    public ANotOpFactorL()
    {
        // Constructor
    }

    public ANotOpFactorL(
        @SuppressWarnings("hiding") TOperNot _operNot_,
        @SuppressWarnings("hiding") PFactorL _factorL_)
    {
        // Constructor
        setOperNot(_operNot_);

        setFactorL(_factorL_);

    }

    @Override
    public Object clone()
    {
        return new ANotOpFactorL(
            cloneNode(this._operNot_),
            cloneNode(this._factorL_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotOpFactorL(this);
    }

    public TOperNot getOperNot()
    {
        return this._operNot_;
    }

    public void setOperNot(TOperNot node)
    {
        if(this._operNot_ != null)
        {
            this._operNot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operNot_ = node;
    }

    public PFactorL getFactorL()
    {
        return this._factorL_;
    }

    public void setFactorL(PFactorL node)
    {
        if(this._factorL_ != null)
        {
            this._factorL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factorL_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._operNot_)
            + toString(this._factorL_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._operNot_ == child)
        {
            this._operNot_ = null;
            return;
        }

        if(this._factorL_ == child)
        {
            this._factorL_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._operNot_ == oldChild)
        {
            setOperNot((TOperNot) newChild);
            return;
        }

        if(this._factorL_ == oldChild)
        {
            setFactorL((PFactorL) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
