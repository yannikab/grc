Package k31.grc;


Helpers

	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	digit = ['0' .. '9'];
	underscore = '_';

	tab = 9;
	cr = 13;
	lf = 10;

	eol = cr | lf | cr lf;
	whitespace = ' ' | tab | eol;

	printchar = [32 .. 126];
	prtabchar = [printchar + tab];

	specialchar = [[''' + '"'] + '\'];
	commonchar = [printchar - specialchar];

	hexdigit = digit | ['a' .. 'f'] | ['A' .. 'F'];
	escape = '\n' | '\t' | '\r' | '\e' | '\\' | '\' ''' | '\"' | '\x' hexdigit hexdigit;


States

	code, comment, comment_possible_end;


Tokens

// keywords

	{code} key_var = 'var';

	{code} key_char = 'char';
	{code} key_int = 'int';
	
	{code} key_if = 'if';
	{code} key_then = 'then';
	{code} key_else = 'else';
	{code} key_while = 'while';
	{code} key_do = 'do';

	{code} key_fun = 'fun';
	{code} key_ref = 'ref';
	{code} key_nothing = 'nothing';
	{code} key_return = 'return';


// operators

	{code} oper_plus = '+';
	{code} oper_minus = '-';
	{code} oper_mul = '*';
	{code} oper_div = 'div';
	{code} oper_mod = 'mod';

	{code} oper_eq = '=';
	{code} oper_ne = '#';
	{code} oper_lt = '<';
	{code} oper_gt = '>';
	{code} oper_le = '<=';
	{code} oper_ge = '>=';

	{code} oper_and = 'and';
	{code} oper_or = 'or';
	{code} oper_not = 'not';


// separators

	{code} sep_lpar = '(';
	{code} sep_rpar = ')';
	{code} sep_lbrack = '[';
	{code} sep_rbrack = ']';
	{code} sep_lbrace = '{';
	{code} sep_rbrace = '}';
	{code} sep_comma = ',';
	{code} sep_colon = ':';
	{code} sep_semi = ';';
	{code} sep_assign = '<-';


// main

	{code} identifier = letter (letter | digit | underscore)*;

	{code} const_int = digit+;
	{code} const_chr = ''' (commonchar | escape) ''';
	{code} const_str = '"' (commonchar | escape)* '"';


// ignored

	// whitespace
	{code} whitespace = (whitespace)*;

	// comment line
	{code} comment_line = '$' ( [prtabchar - '$'] prtabchar* )? eol?;

	// comment span
	{code -> comment} comment_start = '$$';
	{comment_possible_end -> code} comment_end = '$'; // priority over next token
	{comment -> comment_possible_end, comment_possible_end} comment_content = ([prtabchar - '$'] | eol)* '$'?;


Ignored Tokens

	whitespace, comment_line, comment_start, comment_content, comment_end;


Productions

	grammar = {expression} grammar_expression
	        | {condition} grammar_condition;


// constant arithmetic

	grammar_expression = expression;

	expression = {addition} expression oper_plus term
	           | {subtraction} expression oper_minus term
	           | {term} term;

	term = {multiplication} term oper_mul factor
	     | {division} term oper_div factor
	     | {modulo} term oper_mod factor
	     | {factor} factor;

	factor = {integer} const_int
	       | {character} const_chr
	       | {parenthesis} sep_lpar expression sep_rpar
	       | {plus} oper_plus factor
	       | {minus} oper_minus factor
	       | {lvalue} lvalue
	       | {funcall} fun_call;


// l-value

	lvalue = {lvalue} lvalue sep_lbrack expression sep_rbrack
	       | {string} const_str
	       | {identifier} identifier;


// function call

	fun_call = identifier sep_lpar fun_arg? sep_rpar;
	fun_arg = expression fun_arg2*;
	fun_arg2 = sep_comma expression;


// condition

	grammar_condition = expression_l_semi*;
	expression_l_semi = expression_l sep_semi;

	expression_l = {or_op} expression_l oper_or term_l
	             | {term_l} term_l;

	term_l = {and_op} term_l oper_and factor_l
	       | {factor_l} factor_l;

	factor_l = {not_op} oper_not factor_l
	         | {parenthesis} sep_lpar expression_l sep_rpar
	         | {equal} [l]:expression oper_eq [r]:expression
	         | {notequal} [l]:expression oper_ne [r]:expression
	         | {greaterthan} [l]:expression oper_gt [r]:expression	         
	         | {lessthan} [l]:expression oper_lt [r]:expression
	         | {greaterequal} [l]:expression oper_ge [r]:expression
	         | {lessequal} [l]:expression oper_le [r]:expression;
