Package k31.grc.cst;


Helpers

	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	digit = ['0' .. '9'];
	underscore = '_';

	tab = 9;
	cr = 13;
	lf = 10;

	eol = cr | lf | cr lf;
	whitespace = ' ' | tab | eol;

	printchar = [32 .. 126];
	prtabchar = [printchar + tab];

	specialchar = [[''' + '"'] + '\'];
	commonchar = [printchar - specialchar];

	hexdigit = digit | ['a' .. 'f'] | ['A' .. 'F'];
	escape = '\n' | '\t' | '\r' | '\0' | '\\' | '\' ''' | '\"' | '\x' hexdigit hexdigit;


States

	code, comment, comment_possible_end;


Tokens

// keywords

	{code} key_var = 'var';

	{code} key_char = 'char';
	{code} key_int = 'int';
	
	{code} key_if = 'if';
	{code} key_then = 'then';
	{code} key_else = 'else';
	{code} key_while = 'while';
	{code} key_do = 'do';

	{code} key_fun = 'fun';
	{code} key_ref = 'ref';
	{code} key_nothing = 'nothing';
	{code} key_return = 'return';


// operators

	{code} oper_plus = '+';
	{code} oper_minus = '-';
	{code} oper_mul = '*';
	{code} oper_div = 'div';
	{code} oper_mod = 'mod';

	{code} oper_eq = '=';
	{code} oper_ne = '#';
	{code} oper_lt = '<';
	{code} oper_gt = '>';
	{code} oper_le = '<=';
	{code} oper_ge = '>=';

	{code} oper_and = 'and';
	{code} oper_or = 'or';
	{code} oper_not = 'not';


// separators

	{code} sep_lpar = '(';
	{code} sep_rpar = ')';
	{code} sep_lbrack = '[';
	{code} sep_rbrack = ']';
	{code} sep_lbrace = '{';
	{code} sep_rbrace = '}';
	{code} sep_comma = ',';
	{code} sep_colon = ':';
	{code} sep_semi = ';';
	{code} sep_assign = '<-';


// main

	{code} identifier = letter (letter | digit | underscore)*;

	{code} integer = digit+;
	{code} character = ''' (commonchar | escape) ''';
	{code} string = '"' (commonchar | escape)* '"';


// ignored

	// whitespace
	{code} whitespace = (whitespace)*;

	// comment line
	{code} comment_line = '$' ( [prtabchar - '$'] prtabchar* )? eol?;

	// comment span
	{code -> comment} comment_start = '$$';
	{comment_possible_end -> code} comment_end = '$'; // priority over next token
	{comment -> comment_possible_end, comment_possible_end} comment_content = ([prtabchar - '$'] | eol)* '$'?;


Ignored Tokens

	whitespace, comment_line, comment_start, comment_content, comment_end;


Productions


// program

	program = func_def; 


// constant arithmetic

	expression = {addition} expression oper_plus term
	           | {subtraction} expression oper_minus term
	           | {term} term;

	term = {multiply} term oper_mul factor
	     | {div} term oper_div factor
	     | {mod} term oper_mod factor
	     | {factor} factor;

	factor = {integer} integer
	       | {character} character
	       | {parenthesis} sep_lpar expression sep_rpar
	       | {plus} oper_plus factor
	       | {minus} oper_minus factor
	       | {l_value} l_value
	       | {function_call} function_call;


// l-value

	l_value = {indexed} l_value sep_lbrack expression sep_rbrack
	        | {string} string
	        | {identifier} identifier;


// function call

	function_call = identifier sep_lpar function_args? sep_rpar;
	function_args = expression function_args_more*;
	function_args_more = sep_comma expression;


// condition


	expression_l = {or_op} expression_l oper_or term_l
	             | {term_l} term_l;

	term_l = {and_op} term_l oper_and factor_l
	       | {factor_l} factor_l;

	factor_l = {not_op} oper_not factor_l
	         | {parenthesis} sep_lpar expression_l sep_rpar
	         | {equal} [l]:expression oper_eq [r]:expression
	         | {not_equal} [l]:expression oper_ne [r]:expression
	         | {greater_than} [l]:expression oper_gt [r]:expression	         
	         | {less_than} [l]:expression oper_lt [r]:expression
	         | {greater_equal} [l]:expression oper_ge [r]:expression
	         | {less_equal} [l]:expression oper_le [r]:expression;


// statement

	statement = {semicolon} semicolon_stmt
	          | {assign} assign_stmt
	          | {block} block_stmt
	          | {function_call} function_call_stmt
	          | {return} return_stmt
	          | {if} if_stmt
	          | {while} while_stmt;

	statement_else = {semicolon} semicolon_stmt
	               | {assign} assign_stmt
	               | {block} block_stmt
	               | {function_call} function_call_stmt
	               | {return} return_stmt
	               | {if} if_stmt_else
	               | {while} while_stmt_else;


// semicolon statement

	semicolon_stmt = sep_semi;


// assign statement

	assign_stmt = l_value sep_assign expression sep_semi;


// block statement

	block_stmt = sep_lbrace statement* sep_rbrace;


// function call statement

	function_call_stmt = function_call sep_semi;


// return statement

	return_stmt = key_return expression? sep_semi;


// if statement

	if_stmt = {then} key_if expression_l key_then statement
	        | {then_else} key_if expression_l key_then statement_else key_else statement;

	if_stmt_else = key_if expression_l key_then [t]:statement_else key_else [e]:statement_else;


// while statement

	while_stmt = key_while expression_l key_do statement;

	while_stmt_else = key_while expression_l key_do statement_else;


// data type

	data_type = {char} key_char
	          | {int} key_int;


// return type

	return_type = {data} data_type
	            | {nothing} key_nothing;


// array dimensions

	array_no_dim = sep_lbrack sep_rbrack;
	array_dim = sep_lbrack integer sep_rbrack;


// type

	type = data_type array_dim*;


// variable definition

	var_def = key_var identifier var_more* sep_colon type sep_semi;
	var_more = sep_comma identifier;


// formal parameter type

	fpar_type = data_type array_no_dim? array_dim*;


// formal parameter definition

	fpar_def = key_ref? identifier fpar_more* sep_colon fpar_type;
	fpar_more = sep_comma identifier;


// function header

	header = key_fun identifier sep_lpar func_args? sep_rpar sep_colon return_type;
	func_args = fpar_def fpar_def_more*;
	fpar_def_more = sep_semi fpar_def;


// function declaration

	func_decl = header sep_semi;


// function definition

	func_def = header local_def* block_stmt;


// local definition

	local_def = {func} func_def
	          | {func_decl} func_decl
	          | {var} var_def;
