Package k31.grc;


Helpers

	letter = [['a' .. 'z'] + ['A' .. 'Z']];
	digit = ['0' .. '9'];
	underscore = '_';

	tab = 9;
	cr = 13;
	lf = 10;

	eol = cr | lf | cr lf;
	whitespace = ' ' | tab | eol;

	printchar = [32 .. 126];
	prtabchar = [printchar + tab];

	specialchar = [[''' + '"'] + '\'];
	commonchar = [printchar - specialchar];

	hexdigit = digit | ['a' .. 'f'] | ['A' .. 'F'];
	escape = '\n' | '\t' | '\r' | '\e' | '\\' | '\' ''' | '\"' | '\x' hexdigit hexdigit;


States

	code, comment, comment_possible_end;


Tokens

// keywords

	{code} key_var = 'var';
	
	{code} key_char = 'char';
	{code} key_int = 'int';
	
	{code} key_if = 'if';
	{code} key_then = 'then';
	{code} key_else = 'else';
	{code} key_while = 'while';
	{code} key_do = 'do';
	
	{code} key_fun = 'fun';
	{code} key_ref = 'ref';
	{code} key_nothing = 'nothing';
	{code} key_return = 'return';
	

// operators

	{code} oper_plus = '+';
	{code} oper_minus = '-';
	{code} oper_mul = '*';
	{code} oper_div = 'div';
	{code} oper_mod = 'mod';
	{code} oper_hash = '#';
	
	{code} oper_eq = '=';
	{code} oper_ne = '<>';
	{code} oper_lt = '<';
	{code} oper_gt = '>';
	{code} oper_le = '<=';
	{code} oper_ge = '>=';
	
	{code} oper_and = 'and';
	{code} oper_or = 'or';
	{code} oper_not = 'not';
	

// separators

	{code} sep_lpar = '(';
	{code} sep_rpar = ')';
	{code} sep_lbrack = '[';
	{code} sep_rbrack = ']';
	{code} sep_lbrace = '{';
	{code} sep_rbrace = '}';


// main

	{code} identifier = letter (letter | digit | underscore)*;

	{code} const_int = digit+;
	{code} const_chr = ''' (commonchar | escape) ''';
	{code} const_str = '"' (commonchar | escape)* '"';


// ignored

	// whitespace
	{code} whitespace = (whitespace)*;

	// comment line
	{code} comment_line = '$' ( [prtabchar - '$'] prtabchar* )? eol?;

	// comment span
	{code -> comment} comment_start = '$$';
	{comment_possible_end -> code} comment_end = '$'; // priority over next token
	{comment -> comment_possible_end, comment_possible_end} comment_content = ([prtabchar - '$'] | eol)* '$'?;


Ignored Tokens

	whitespace, comment_line, comment_start, comment_content, comment_end;


Productions

// constant arithmetic

	expr = term expr2;
	expr2 = {add} oper_plus term expr2
	          | {sub} oper_minus term expr2
	          | {e};

	term = fact term2;
	term2 = {mul} oper_mul fact term2
	          | {div} oper_div fact term2
	          | {mod} oper_mod fact term2
	          | {e};

	fact = {int} const_int
	     | {char} const_chr
	     | {par} sep_lpar expr sep_rpar
	     | {plus} oper_plus fact
	     | {minus} oper_minus fact;
