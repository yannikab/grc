/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.node;

import k31.grc.cst.analysis.*;

@SuppressWarnings("nls")
public final class AIndexedLValue extends PLValue
{
    private PLValue _lValue_;
    private TSepLbrack _sepLbrack_;
    private PExpression _expression_;
    private TSepRbrack _sepRbrack_;

    public AIndexedLValue()
    {
        // Constructor
    }

    public AIndexedLValue(
        @SuppressWarnings("hiding") PLValue _lValue_,
        @SuppressWarnings("hiding") TSepLbrack _sepLbrack_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TSepRbrack _sepRbrack_)
    {
        // Constructor
        setLValue(_lValue_);

        setSepLbrack(_sepLbrack_);

        setExpression(_expression_);

        setSepRbrack(_sepRbrack_);

    }

    @Override
    public Object clone()
    {
        return new AIndexedLValue(
            cloneNode(this._lValue_),
            cloneNode(this._sepLbrack_),
            cloneNode(this._expression_),
            cloneNode(this._sepRbrack_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndexedLValue(this);
    }

    public PLValue getLValue()
    {
        return this._lValue_;
    }

    public void setLValue(PLValue node)
    {
        if(this._lValue_ != null)
        {
            this._lValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lValue_ = node;
    }

    public TSepLbrack getSepLbrack()
    {
        return this._sepLbrack_;
    }

    public void setSepLbrack(TSepLbrack node)
    {
        if(this._sepLbrack_ != null)
        {
            this._sepLbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sepLbrack_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TSepRbrack getSepRbrack()
    {
        return this._sepRbrack_;
    }

    public void setSepRbrack(TSepRbrack node)
    {
        if(this._sepRbrack_ != null)
        {
            this._sepRbrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sepRbrack_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lValue_)
            + toString(this._sepLbrack_)
            + toString(this._expression_)
            + toString(this._sepRbrack_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lValue_ == child)
        {
            this._lValue_ = null;
            return;
        }

        if(this._sepLbrack_ == child)
        {
            this._sepLbrack_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._sepRbrack_ == child)
        {
            this._sepRbrack_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lValue_ == oldChild)
        {
            setLValue((PLValue) newChild);
            return;
        }

        if(this._sepLbrack_ == oldChild)
        {
            setSepLbrack((TSepLbrack) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._sepRbrack_ == oldChild)
        {
            setSepRbrack((TSepRbrack) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
