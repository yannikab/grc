/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.node;

import k31.grc.cst.analysis.*;

@SuppressWarnings("nls")
public final class ALessThanFactorL extends PFactorL
{
    private PExpression _l_;
    private TOperLt _operLt_;
    private PExpression _r_;

    public ALessThanFactorL()
    {
        // Constructor
    }

    public ALessThanFactorL(
        @SuppressWarnings("hiding") PExpression _l_,
        @SuppressWarnings("hiding") TOperLt _operLt_,
        @SuppressWarnings("hiding") PExpression _r_)
    {
        // Constructor
        setL(_l_);

        setOperLt(_operLt_);

        setR(_r_);

    }

    @Override
    public Object clone()
    {
        return new ALessThanFactorL(
            cloneNode(this._l_),
            cloneNode(this._operLt_),
            cloneNode(this._r_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessThanFactorL(this);
    }

    public PExpression getL()
    {
        return this._l_;
    }

    public void setL(PExpression node)
    {
        if(this._l_ != null)
        {
            this._l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l_ = node;
    }

    public TOperLt getOperLt()
    {
        return this._operLt_;
    }

    public void setOperLt(TOperLt node)
    {
        if(this._operLt_ != null)
        {
            this._operLt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operLt_ = node;
    }

    public PExpression getR()
    {
        return this._r_;
    }

    public void setR(PExpression node)
    {
        if(this._r_ != null)
        {
            this._r_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._r_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._l_)
            + toString(this._operLt_)
            + toString(this._r_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._l_ == child)
        {
            this._l_ = null;
            return;
        }

        if(this._operLt_ == child)
        {
            this._operLt_ = null;
            return;
        }

        if(this._r_ == child)
        {
            this._r_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._l_ == oldChild)
        {
            setL((PExpression) newChild);
            return;
        }

        if(this._operLt_ == oldChild)
        {
            setOperLt((TOperLt) newChild);
            return;
        }

        if(this._r_ == oldChild)
        {
            setR((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
