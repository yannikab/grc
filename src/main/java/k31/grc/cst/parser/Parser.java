/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.cst.parser;

import k31.grc.cst.lexer.*;
import k31.grc.cst.node.*;
import k31.grc.cst.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAdditionExpression */
		    {
			ArrayList<Object> list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce ASubtractionExpression */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce ATermExpression */
		    {
			ArrayList<Object> list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AMultiplyTerm */
		    {
			ArrayList<Object> list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce ADivTerm */
		    {
			ArrayList<Object> list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AModTerm */
		    {
			ArrayList<Object> list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AFactorTerm */
		    {
			ArrayList<Object> list = new7();
			push(goTo(2), list, false);
		    }
		    break;
                    case 8: /* reduce AIntegerFactor */
		    {
			ArrayList<Object> list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce ACharacterFactor */
		    {
			ArrayList<Object> list = new9();
			push(goTo(3), list, false);
		    }
		    break;
                    case 10: /* reduce AParenthesisFactor */
		    {
			ArrayList<Object> list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce APlusFactor */
		    {
			ArrayList<Object> list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce AMinusFactor */
		    {
			ArrayList<Object> list = new12();
			push(goTo(3), list, false);
		    }
		    break;
                    case 13: /* reduce ALValueFactor */
		    {
			ArrayList<Object> list = new13();
			push(goTo(3), list, false);
		    }
		    break;
                    case 14: /* reduce AFunctionCallFactor */
		    {
			ArrayList<Object> list = new14();
			push(goTo(3), list, false);
		    }
		    break;
                    case 15: /* reduce AIndexedLValue */
		    {
			ArrayList<Object> list = new15();
			push(goTo(4), list, false);
		    }
		    break;
                    case 16: /* reduce AStringLValue */
		    {
			ArrayList<Object> list = new16();
			push(goTo(4), list, false);
		    }
		    break;
                    case 17: /* reduce AIdentifierLValue */
		    {
			ArrayList<Object> list = new17();
			push(goTo(4), list, false);
		    }
		    break;
                    case 18: /* reduce AAfunctioncall1FunctionCall */
		    {
			ArrayList<Object> list = new18();
			push(goTo(5), list, false);
		    }
		    break;
                    case 19: /* reduce AAfunctioncall2FunctionCall */
		    {
			ArrayList<Object> list = new19();
			push(goTo(5), list, false);
		    }
		    break;
                    case 20: /* reduce AAfunctionargs1FunctionArgs */
		    {
			ArrayList<Object> list = new20();
			push(goTo(6), list, false);
		    }
		    break;
                    case 21: /* reduce AAfunctionargs2FunctionArgs */
		    {
			ArrayList<Object> list = new21();
			push(goTo(6), list, false);
		    }
		    break;
                    case 22: /* reduce AFunctionArgsMore */
		    {
			ArrayList<Object> list = new22();
			push(goTo(7), list, false);
		    }
		    break;
                    case 23: /* reduce AOrOpExpressionL */
		    {
			ArrayList<Object> list = new23();
			push(goTo(8), list, false);
		    }
		    break;
                    case 24: /* reduce ATermLExpressionL */
		    {
			ArrayList<Object> list = new24();
			push(goTo(8), list, false);
		    }
		    break;
                    case 25: /* reduce AAndOpTermL */
		    {
			ArrayList<Object> list = new25();
			push(goTo(9), list, false);
		    }
		    break;
                    case 26: /* reduce AFactorLTermL */
		    {
			ArrayList<Object> list = new26();
			push(goTo(9), list, false);
		    }
		    break;
                    case 27: /* reduce ANotOpFactorL */
		    {
			ArrayList<Object> list = new27();
			push(goTo(10), list, false);
		    }
		    break;
                    case 28: /* reduce AParenthesisFactorL */
		    {
			ArrayList<Object> list = new28();
			push(goTo(10), list, false);
		    }
		    break;
                    case 29: /* reduce AEqualFactorL */
		    {
			ArrayList<Object> list = new29();
			push(goTo(10), list, false);
		    }
		    break;
                    case 30: /* reduce ANotEqualFactorL */
		    {
			ArrayList<Object> list = new30();
			push(goTo(10), list, false);
		    }
		    break;
                    case 31: /* reduce AGreaterThanFactorL */
		    {
			ArrayList<Object> list = new31();
			push(goTo(10), list, false);
		    }
		    break;
                    case 32: /* reduce ALessThanFactorL */
		    {
			ArrayList<Object> list = new32();
			push(goTo(10), list, false);
		    }
		    break;
                    case 33: /* reduce AGreaterEqualFactorL */
		    {
			ArrayList<Object> list = new33();
			push(goTo(10), list, false);
		    }
		    break;
                    case 34: /* reduce ALessEqualFactorL */
		    {
			ArrayList<Object> list = new34();
			push(goTo(10), list, false);
		    }
		    break;
                    case 35: /* reduce ASemicolonStatement */
		    {
			ArrayList<Object> list = new35();
			push(goTo(11), list, false);
		    }
		    break;
                    case 36: /* reduce AAssignStatement */
		    {
			ArrayList<Object> list = new36();
			push(goTo(11), list, false);
		    }
		    break;
                    case 37: /* reduce ABlockStatement */
		    {
			ArrayList<Object> list = new37();
			push(goTo(11), list, false);
		    }
		    break;
                    case 38: /* reduce AFunctionCallStatement */
		    {
			ArrayList<Object> list = new38();
			push(goTo(11), list, false);
		    }
		    break;
                    case 39: /* reduce AReturnStatement */
		    {
			ArrayList<Object> list = new39();
			push(goTo(11), list, false);
		    }
		    break;
                    case 40: /* reduce AIfStatement */
		    {
			ArrayList<Object> list = new40();
			push(goTo(11), list, false);
		    }
		    break;
                    case 41: /* reduce AWhileStatement */
		    {
			ArrayList<Object> list = new41();
			push(goTo(11), list, false);
		    }
		    break;
                    case 42: /* reduce ASemicolonStatementElse */
		    {
			ArrayList<Object> list = new42();
			push(goTo(12), list, false);
		    }
		    break;
                    case 43: /* reduce AAssignStatementElse */
		    {
			ArrayList<Object> list = new43();
			push(goTo(12), list, false);
		    }
		    break;
                    case 44: /* reduce ABlockStatementElse */
		    {
			ArrayList<Object> list = new44();
			push(goTo(12), list, false);
		    }
		    break;
                    case 45: /* reduce AFunctionCallStatementElse */
		    {
			ArrayList<Object> list = new45();
			push(goTo(12), list, false);
		    }
		    break;
                    case 46: /* reduce AReturnStatementElse */
		    {
			ArrayList<Object> list = new46();
			push(goTo(12), list, false);
		    }
		    break;
                    case 47: /* reduce AIfStatementElse */
		    {
			ArrayList<Object> list = new47();
			push(goTo(12), list, false);
		    }
		    break;
                    case 48: /* reduce AWhileStatementElse */
		    {
			ArrayList<Object> list = new48();
			push(goTo(12), list, false);
		    }
		    break;
                    case 49: /* reduce ASemicolonStmt */
		    {
			ArrayList<Object> list = new49();
			push(goTo(13), list, false);
		    }
		    break;
                    case 50: /* reduce AAssignStmt */
		    {
			ArrayList<Object> list = new50();
			push(goTo(14), list, false);
		    }
		    break;
                    case 51: /* reduce AAblockstmt1BlockStmt */
		    {
			ArrayList<Object> list = new51();
			push(goTo(15), list, false);
		    }
		    break;
                    case 52: /* reduce AAblockstmt2BlockStmt */
		    {
			ArrayList<Object> list = new52();
			push(goTo(15), list, false);
		    }
		    break;
                    case 53: /* reduce AFunctionCallStmt */
		    {
			ArrayList<Object> list = new53();
			push(goTo(16), list, false);
		    }
		    break;
                    case 54: /* reduce AAreturnstmt1ReturnStmt */
		    {
			ArrayList<Object> list = new54();
			push(goTo(17), list, false);
		    }
		    break;
                    case 55: /* reduce AAreturnstmt2ReturnStmt */
		    {
			ArrayList<Object> list = new55();
			push(goTo(17), list, false);
		    }
		    break;
                    case 56: /* reduce AThenIfStmt */
		    {
			ArrayList<Object> list = new56();
			push(goTo(18), list, false);
		    }
		    break;
                    case 57: /* reduce AThenElseIfStmt */
		    {
			ArrayList<Object> list = new57();
			push(goTo(18), list, false);
		    }
		    break;
                    case 58: /* reduce AIfStmtElse */
		    {
			ArrayList<Object> list = new58();
			push(goTo(19), list, false);
		    }
		    break;
                    case 59: /* reduce AWhileStmt */
		    {
			ArrayList<Object> list = new59();
			push(goTo(20), list, false);
		    }
		    break;
                    case 60: /* reduce AWhileStmtElse */
		    {
			ArrayList<Object> list = new60();
			push(goTo(21), list, false);
		    }
		    break;
                    case 61: /* reduce ACharDataType */
		    {
			ArrayList<Object> list = new61();
			push(goTo(22), list, false);
		    }
		    break;
                    case 62: /* reduce AIntDataType */
		    {
			ArrayList<Object> list = new62();
			push(goTo(22), list, false);
		    }
		    break;
                    case 63: /* reduce ADataReturnType */
		    {
			ArrayList<Object> list = new63();
			push(goTo(23), list, false);
		    }
		    break;
                    case 64: /* reduce ANothingReturnType */
		    {
			ArrayList<Object> list = new64();
			push(goTo(23), list, false);
		    }
		    break;
                    case 65: /* reduce AArrayNoDim */
		    {
			ArrayList<Object> list = new65();
			push(goTo(24), list, false);
		    }
		    break;
                    case 66: /* reduce AArrayDim */
		    {
			ArrayList<Object> list = new66();
			push(goTo(25), list, false);
		    }
		    break;
                    case 67: /* reduce AAtype1Type */
		    {
			ArrayList<Object> list = new67();
			push(goTo(26), list, false);
		    }
		    break;
                    case 68: /* reduce AAtype2Type */
		    {
			ArrayList<Object> list = new68();
			push(goTo(26), list, false);
		    }
		    break;
                    case 69: /* reduce AAvardef1VarDef */
		    {
			ArrayList<Object> list = new69();
			push(goTo(27), list, false);
		    }
		    break;
                    case 70: /* reduce AAvardef2VarDef */
		    {
			ArrayList<Object> list = new70();
			push(goTo(27), list, false);
		    }
		    break;
                    case 71: /* reduce AVarMore */
		    {
			ArrayList<Object> list = new71();
			push(goTo(28), list, false);
		    }
		    break;
                    case 72: /* reduce AAfpartype1FparType */
		    {
			ArrayList<Object> list = new72();
			push(goTo(29), list, false);
		    }
		    break;
                    case 73: /* reduce AAfpartype2FparType */
		    {
			ArrayList<Object> list = new73();
			push(goTo(29), list, false);
		    }
		    break;
                    case 74: /* reduce AAfpartype3FparType */
		    {
			ArrayList<Object> list = new74();
			push(goTo(29), list, false);
		    }
		    break;
                    case 75: /* reduce AAfpartype4FparType */
		    {
			ArrayList<Object> list = new75();
			push(goTo(29), list, false);
		    }
		    break;
                    case 76: /* reduce AAfpardef1FparDef */
		    {
			ArrayList<Object> list = new76();
			push(goTo(30), list, false);
		    }
		    break;
                    case 77: /* reduce AAfpardef2FparDef */
		    {
			ArrayList<Object> list = new77();
			push(goTo(30), list, false);
		    }
		    break;
                    case 78: /* reduce AAfpardef3FparDef */
		    {
			ArrayList<Object> list = new78();
			push(goTo(30), list, false);
		    }
		    break;
                    case 79: /* reduce AAfpardef4FparDef */
		    {
			ArrayList<Object> list = new79();
			push(goTo(30), list, false);
		    }
		    break;
                    case 80: /* reduce AParMore */
		    {
			ArrayList<Object> list = new80();
			push(goTo(31), list, false);
		    }
		    break;
                    case 81: /* reduce AAheader1Header */
		    {
			ArrayList<Object> list = new81();
			push(goTo(32), list, false);
		    }
		    break;
                    case 82: /* reduce AAheader2Header */
		    {
			ArrayList<Object> list = new82();
			push(goTo(32), list, false);
		    }
		    break;
                    case 83: /* reduce AAfuncparams1FuncParams */
		    {
			ArrayList<Object> list = new83();
			push(goTo(33), list, false);
		    }
		    break;
                    case 84: /* reduce AAfuncparams2FuncParams */
		    {
			ArrayList<Object> list = new84();
			push(goTo(33), list, false);
		    }
		    break;
                    case 85: /* reduce AFparDefMore */
		    {
			ArrayList<Object> list = new85();
			push(goTo(34), list, false);
		    }
		    break;
                    case 86: /* reduce AFuncDecl */
		    {
			ArrayList<Object> list = new86();
			push(goTo(35), list, false);
		    }
		    break;
                    case 87: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList<Object> list = new87();
			push(goTo(36), list, false);
		    }
		    break;
                    case 88: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList<Object> list = new88();
			push(goTo(36), list, false);
		    }
		    break;
                    case 89: /* reduce AFuncLocalDef */
		    {
			ArrayList<Object> list = new89();
			push(goTo(37), list, false);
		    }
		    break;
                    case 90: /* reduce AFuncDeclLocalDef */
		    {
			ArrayList<Object> list = new90();
			push(goTo(37), list, false);
		    }
		    break;
                    case 91: /* reduce AVarLocalDef */
		    {
			ArrayList<Object> list = new91();
			push(goTo(37), list, false);
		    }
		    break;
                    case 92: /* reduce ATerminal$FunctionArgsMore */
		    {
			ArrayList<Object> list = new92();
			push(goTo(38), list, true);
		    }
		    break;
                    case 93: /* reduce ANonTerminal$FunctionArgsMore */
		    {
			ArrayList<Object> list = new93();
			push(goTo(38), list, true);
		    }
		    break;
                    case 94: /* reduce ATerminal$Statement */
		    {
			ArrayList<Object> list = new94();
			push(goTo(39), list, true);
		    }
		    break;
                    case 95: /* reduce ANonTerminal$Statement */
		    {
			ArrayList<Object> list = new95();
			push(goTo(39), list, true);
		    }
		    break;
                    case 96: /* reduce ATerminal$ArrayDim */
		    {
			ArrayList<Object> list = new96();
			push(goTo(40), list, true);
		    }
		    break;
                    case 97: /* reduce ANonTerminal$ArrayDim */
		    {
			ArrayList<Object> list = new97();
			push(goTo(40), list, true);
		    }
		    break;
                    case 98: /* reduce ATerminal$VarMore */
		    {
			ArrayList<Object> list = new98();
			push(goTo(41), list, true);
		    }
		    break;
                    case 99: /* reduce ANonTerminal$VarMore */
		    {
			ArrayList<Object> list = new99();
			push(goTo(41), list, true);
		    }
		    break;
                    case 100: /* reduce ATerminal$ParMore */
		    {
			ArrayList<Object> list = new100();
			push(goTo(42), list, true);
		    }
		    break;
                    case 101: /* reduce ANonTerminal$ParMore */
		    {
			ArrayList<Object> list = new101();
			push(goTo(42), list, true);
		    }
		    break;
                    case 102: /* reduce ATerminal$FparDefMore */
		    {
			ArrayList<Object> list = new102();
			push(goTo(43), list, true);
		    }
		    break;
                    case 103: /* reduce ANonTerminal$FparDefMore */
		    {
			ArrayList<Object> list = new103();
			push(goTo(43), list, true);
		    }
		    break;
                    case 104: /* reduce ATerminal$LocalDef */
		    {
			ArrayList<Object> list = new104();
			push(goTo(44), list, true);
		    }
		    break;
                    case 105: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList<Object> list = new105();
			push(goTo(44), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAdditionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperPlus toperplusNode3;
        PTerm ptermNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        toperplusNode3 = (TOperPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExpression(pexpressionNode2, toperplusNode3, ptermNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ASubtractionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperMinus toperminusNode3;
        PTerm ptermNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        toperminusNode3 = (TOperMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExpression(pexpressionNode2, toperminusNode3, ptermNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ATermExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexpressionNode1 = new ATermExpression(ptermNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMultiplyTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TOperMul topermulNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        topermulNode3 = (TOperMul)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultiplyTerm(ptermNode2, topermulNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TOperDiv toperdivNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        toperdivNode3 = (TOperDiv)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, toperdivNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TOperMod topermodNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        topermodNode3 = (TOperMod)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AModTerm(ptermNode2, topermodNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIntegerFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pfactorNode1 = new AIntegerFactor(tintegerNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACharacterFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TCharacter tcharacterNode2;
        tcharacterNode2 = (TCharacter)nodeArrayList1.get(0);

        pfactorNode1 = new ACharacterFactor(tcharacterNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AParenthesisFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TSepLpar tseplparNode2;
        PExpression pexpressionNode3;
        TSepRpar tseprparNode4;
        tseplparNode2 = (TSepLpar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tseprparNode4 = (TSepRpar)nodeArrayList3.get(0);

        pfactorNode1 = new AParenthesisFactor(tseplparNode2, pexpressionNode3, tseprparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce APlusFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TOperPlus toperplusNode2;
        PFactor pfactorNode3;
        toperplusNode2 = (TOperPlus)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new APlusFactor(toperplusNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMinusFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TOperMinus toperminusNode2;
        PFactor pfactorNode3;
        toperminusNode2 = (TOperMinus)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new AMinusFactor(toperminusNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ALValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        pfactorNode1 = new ALValueFactor(plvalueNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFunctionCallFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pfactorNode1 = new AFunctionCallFactor(pfunctioncallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AIndexedLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TSepLbrack tseplbrackNode3;
        PExpression pexpressionNode4;
        TSepRbrack tseprbrackNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tseplbrackNode3 = (TSepLbrack)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tseprbrackNode5 = (TSepRbrack)nodeArrayList4.get(0);

        plvalueNode1 = new AIndexedLValue(plvalueNode2, tseplbrackNode3, pexpressionNode4, tseprbrackNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AStringLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLValue(tstringNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIdentifierLValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new AIdentifierLValue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAfunctioncall1FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TSepLpar tseplparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TSepRpar tseprparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tseplparNode3 = (TSepLpar)nodeArrayList2.get(0);
        tseprparNode5 = (TSepRpar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tseplparNode3, null, tseprparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAfunctioncall2FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TSepLpar tseplparNode3;
        PFunctionArgs pfunctionargsNode4;
        TSepRpar tseprparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tseplparNode3 = (TSepLpar)nodeArrayList2.get(0);
        pfunctionargsNode4 = (PFunctionArgs)nodeArrayList3.get(0);
        tseprparNode5 = (TSepRpar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, tseplparNode3, pfunctionargsNode4, tseprparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAfunctionargs1FunctionArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionArgs pfunctionargsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunctionargsNode1 = new AFunctionArgs(pexpressionNode2, listNode3);
        }
	nodeList.add(pfunctionargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAfunctionargs2FunctionArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionArgs pfunctionargsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunctionargsNode1 = new AFunctionArgs(pexpressionNode2, listNode4);
        }
	nodeList.add(pfunctionargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFunctionArgsMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionArgsMore pfunctionargsmoreNode1;
        {
            // Block
        TSepComma tsepcommaNode2;
        PExpression pexpressionNode3;
        tsepcommaNode2 = (TSepComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pfunctionargsmoreNode1 = new AFunctionArgsMore(tsepcommaNode2, pexpressionNode3);
        }
	nodeList.add(pfunctionargsmoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AOrOpExpressionL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionL pexpressionlNode1;
        {
            // Block
        PExpressionL pexpressionlNode2;
        TOperOr toperorNode3;
        PTermL ptermlNode4;
        pexpressionlNode2 = (PExpressionL)nodeArrayList1.get(0);
        toperorNode3 = (TOperOr)nodeArrayList2.get(0);
        ptermlNode4 = (PTermL)nodeArrayList3.get(0);

        pexpressionlNode1 = new AOrOpExpressionL(pexpressionlNode2, toperorNode3, ptermlNode4);
        }
	nodeList.add(pexpressionlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATermLExpressionL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressionL pexpressionlNode1;
        {
            // Block
        PTermL ptermlNode2;
        ptermlNode2 = (PTermL)nodeArrayList1.get(0);

        pexpressionlNode1 = new ATermLExpressionL(ptermlNode2);
        }
	nodeList.add(pexpressionlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAndOpTermL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermL ptermlNode1;
        {
            // Block
        PTermL ptermlNode2;
        TOperAnd toperandNode3;
        PFactorL pfactorlNode4;
        ptermlNode2 = (PTermL)nodeArrayList1.get(0);
        toperandNode3 = (TOperAnd)nodeArrayList2.get(0);
        pfactorlNode4 = (PFactorL)nodeArrayList3.get(0);

        ptermlNode1 = new AAndOpTermL(ptermlNode2, toperandNode3, pfactorlNode4);
        }
	nodeList.add(ptermlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFactorLTermL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermL ptermlNode1;
        {
            // Block
        PFactorL pfactorlNode2;
        pfactorlNode2 = (PFactorL)nodeArrayList1.get(0);

        ptermlNode1 = new AFactorLTermL(pfactorlNode2);
        }
	nodeList.add(ptermlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANotOpFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        TOperNot topernotNode2;
        PFactorL pfactorlNode3;
        topernotNode2 = (TOperNot)nodeArrayList1.get(0);
        pfactorlNode3 = (PFactorL)nodeArrayList2.get(0);

        pfactorlNode1 = new ANotOpFactorL(topernotNode2, pfactorlNode3);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AParenthesisFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        TSepLpar tseplparNode2;
        PExpressionL pexpressionlNode3;
        TSepRpar tseprparNode4;
        tseplparNode2 = (TSepLpar)nodeArrayList1.get(0);
        pexpressionlNode3 = (PExpressionL)nodeArrayList2.get(0);
        tseprparNode4 = (TSepRpar)nodeArrayList3.get(0);

        pfactorlNode1 = new AParenthesisFactorL(tseplparNode2, pexpressionlNode3, tseprparNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEqualFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperEq topereqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        topereqNode3 = (TOperEq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorlNode1 = new AEqualFactorL(pexpressionNode2, topereqNode3, pexpressionNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANotEqualFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperNe toperneNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        toperneNode3 = (TOperNe)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorlNode1 = new ANotEqualFactorL(pexpressionNode2, toperneNode3, pexpressionNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AGreaterThanFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperGt topergtNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        topergtNode3 = (TOperGt)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorlNode1 = new AGreaterThanFactorL(pexpressionNode2, topergtNode3, pexpressionNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALessThanFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperLt toperltNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        toperltNode3 = (TOperLt)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorlNode1 = new ALessThanFactorL(pexpressionNode2, toperltNode3, pexpressionNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AGreaterEqualFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperGe topergeNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        topergeNode3 = (TOperGe)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorlNode1 = new AGreaterEqualFactorL(pexpressionNode2, topergeNode3, pexpressionNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALessEqualFactorL */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactorL pfactorlNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TOperLe toperleNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        toperleNode3 = (TOperLe)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pfactorlNode1 = new ALessEqualFactorL(pexpressionNode2, toperleNode3, pexpressionNode4);
        }
	nodeList.add(pfactorlNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASemicolonStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PSemicolonStmt psemicolonstmtNode2;
        psemicolonstmtNode2 = (PSemicolonStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ASemicolonStatement(psemicolonstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignStmt passignstmtNode2;
        passignstmtNode2 = (PAssignStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignStatement(passignstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ABlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlockStmt pblockstmtNode2;
        pblockstmtNode2 = (PBlockStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AFunctionCallStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFunctionCallStmt pfunctioncallstmtNode2;
        pfunctioncallstmtNode2 = (PFunctionCallStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AFunctionCallStatement(pfunctioncallstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AReturnStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PReturnStmt preturnstmtNode2;
        preturnstmtNode2 = (PReturnStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AReturnStatement(preturnstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AIfStatement(pifstmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhileStmt pwhilestmtNode2;
        pwhilestmtNode2 = (PWhileStmt)nodeArrayList1.get(0);

        pstatementNode1 = new AWhileStatement(pwhilestmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASemicolonStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PSemicolonStmt psemicolonstmtNode2;
        psemicolonstmtNode2 = (PSemicolonStmt)nodeArrayList1.get(0);

        pstatementelseNode1 = new ASemicolonStatementElse(psemicolonstmtNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAssignStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PAssignStmt passignstmtNode2;
        passignstmtNode2 = (PAssignStmt)nodeArrayList1.get(0);

        pstatementelseNode1 = new AAssignStatementElse(passignstmtNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ABlockStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PBlockStmt pblockstmtNode2;
        pblockstmtNode2 = (PBlockStmt)nodeArrayList1.get(0);

        pstatementelseNode1 = new ABlockStatementElse(pblockstmtNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFunctionCallStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PFunctionCallStmt pfunctioncallstmtNode2;
        pfunctioncallstmtNode2 = (PFunctionCallStmt)nodeArrayList1.get(0);

        pstatementelseNode1 = new AFunctionCallStatementElse(pfunctioncallstmtNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AReturnStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PReturnStmt preturnstmtNode2;
        preturnstmtNode2 = (PReturnStmt)nodeArrayList1.get(0);

        pstatementelseNode1 = new AReturnStatementElse(preturnstmtNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AIfStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PIfStmtElse pifstmtelseNode2;
        pifstmtelseNode2 = (PIfStmtElse)nodeArrayList1.get(0);

        pstatementelseNode1 = new AIfStatementElse(pifstmtelseNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AWhileStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementElse pstatementelseNode1;
        {
            // Block
        PWhileStmtElse pwhilestmtelseNode2;
        pwhilestmtelseNode2 = (PWhileStmtElse)nodeArrayList1.get(0);

        pstatementelseNode1 = new AWhileStatementElse(pwhilestmtelseNode2);
        }
	nodeList.add(pstatementelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASemicolonStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemicolonStmt psemicolonstmtNode1;
        {
            // Block
        TSepSemi tsepsemiNode2;
        tsepsemiNode2 = (TSepSemi)nodeArrayList1.get(0);

        psemicolonstmtNode1 = new ASemicolonStmt(tsepsemiNode2);
        }
	nodeList.add(psemicolonstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAssignStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignStmt passignstmtNode1;
        {
            // Block
        PLValue plvalueNode2;
        TSepAssign tsepassignNode3;
        PExpression pexpressionNode4;
        TSepSemi tsepsemiNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tsepassignNode3 = (TSepAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsepsemiNode5 = (TSepSemi)nodeArrayList4.get(0);

        passignstmtNode1 = new AAssignStmt(plvalueNode2, tsepassignNode3, pexpressionNode4, tsepsemiNode5);
        }
	nodeList.add(passignstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAblockstmt1BlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockStmt pblockstmtNode1;
        {
            // Block
        TSepLbrace tseplbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TSepRbrace tseprbraceNode4;
        tseplbraceNode2 = (TSepLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        tseprbraceNode4 = (TSepRbrace)nodeArrayList2.get(0);

        pblockstmtNode1 = new ABlockStmt(tseplbraceNode2, listNode3, tseprbraceNode4);
        }
	nodeList.add(pblockstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAblockstmt2BlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockStmt pblockstmtNode1;
        {
            // Block
        TSepLbrace tseplbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSepRbrace tseprbraceNode5;
        tseplbraceNode2 = (TSepLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tseprbraceNode5 = (TSepRbrace)nodeArrayList3.get(0);

        pblockstmtNode1 = new ABlockStmt(tseplbraceNode2, listNode4, tseprbraceNode5);
        }
	nodeList.add(pblockstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AFunctionCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCallStmt pfunctioncallstmtNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        TSepSemi tsepsemiNode3;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);
        tsepsemiNode3 = (TSepSemi)nodeArrayList2.get(0);

        pfunctioncallstmtNode1 = new AFunctionCallStmt(pfunctioncallNode2, tsepsemiNode3);
        }
	nodeList.add(pfunctioncallstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAreturnstmt1ReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStmt preturnstmtNode1;
        {
            // Block
        TKeyReturn tkeyreturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSepSemi tsepsemiNode4;
        tkeyreturnNode2 = (TKeyReturn)nodeArrayList1.get(0);
        tsepsemiNode4 = (TSepSemi)nodeArrayList2.get(0);

        preturnstmtNode1 = new AReturnStmt(tkeyreturnNode2, null, tsepsemiNode4);
        }
	nodeList.add(preturnstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAreturnstmt2ReturnStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnStmt preturnstmtNode1;
        {
            // Block
        TKeyReturn tkeyreturnNode2;
        PExpression pexpressionNode3;
        TSepSemi tsepsemiNode4;
        tkeyreturnNode2 = (TKeyReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tsepsemiNode4 = (TSepSemi)nodeArrayList3.get(0);

        preturnstmtNode1 = new AReturnStmt(tkeyreturnNode2, pexpressionNode3, tsepsemiNode4);
        }
	nodeList.add(preturnstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AThenIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TKeyIf tkeyifNode2;
        PExpressionL pexpressionlNode3;
        TKeyThen tkeythenNode4;
        PStatement pstatementNode5;
        tkeyifNode2 = (TKeyIf)nodeArrayList1.get(0);
        pexpressionlNode3 = (PExpressionL)nodeArrayList2.get(0);
        tkeythenNode4 = (TKeyThen)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pifstmtNode1 = new AThenIfStmt(tkeyifNode2, pexpressionlNode3, tkeythenNode4, pstatementNode5);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AThenElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TKeyIf tkeyifNode2;
        PExpressionL pexpressionlNode3;
        TKeyThen tkeythenNode4;
        PStatementElse pstatementelseNode5;
        TKeyElse tkeyelseNode6;
        PStatement pstatementNode7;
        tkeyifNode2 = (TKeyIf)nodeArrayList1.get(0);
        pexpressionlNode3 = (PExpressionL)nodeArrayList2.get(0);
        tkeythenNode4 = (TKeyThen)nodeArrayList3.get(0);
        pstatementelseNode5 = (PStatementElse)nodeArrayList4.get(0);
        tkeyelseNode6 = (TKeyElse)nodeArrayList5.get(0);
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);

        pifstmtNode1 = new AThenElseIfStmt(tkeyifNode2, pexpressionlNode3, tkeythenNode4, pstatementelseNode5, tkeyelseNode6, pstatementNode7);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AIfStmtElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStmtElse pifstmtelseNode1;
        {
            // Block
        TKeyIf tkeyifNode2;
        PExpressionL pexpressionlNode3;
        TKeyThen tkeythenNode4;
        PStatementElse pstatementelseNode5;
        TKeyElse tkeyelseNode6;
        PStatementElse pstatementelseNode7;
        tkeyifNode2 = (TKeyIf)nodeArrayList1.get(0);
        pexpressionlNode3 = (PExpressionL)nodeArrayList2.get(0);
        tkeythenNode4 = (TKeyThen)nodeArrayList3.get(0);
        pstatementelseNode5 = (PStatementElse)nodeArrayList4.get(0);
        tkeyelseNode6 = (TKeyElse)nodeArrayList5.get(0);
        pstatementelseNode7 = (PStatementElse)nodeArrayList6.get(0);

        pifstmtelseNode1 = new AIfStmtElse(tkeyifNode2, pexpressionlNode3, tkeythenNode4, pstatementelseNode5, tkeyelseNode6, pstatementelseNode7);
        }
	nodeList.add(pifstmtelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileStmt pwhilestmtNode1;
        {
            // Block
        TKeyWhile tkeywhileNode2;
        PExpressionL pexpressionlNode3;
        TKeyDo tkeydoNode4;
        PStatement pstatementNode5;
        tkeywhileNode2 = (TKeyWhile)nodeArrayList1.get(0);
        pexpressionlNode3 = (PExpressionL)nodeArrayList2.get(0);
        tkeydoNode4 = (TKeyDo)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pwhilestmtNode1 = new AWhileStmt(tkeywhileNode2, pexpressionlNode3, tkeydoNode4, pstatementNode5);
        }
	nodeList.add(pwhilestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AWhileStmtElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileStmtElse pwhilestmtelseNode1;
        {
            // Block
        TKeyWhile tkeywhileNode2;
        PExpressionL pexpressionlNode3;
        TKeyDo tkeydoNode4;
        PStatementElse pstatementelseNode5;
        tkeywhileNode2 = (TKeyWhile)nodeArrayList1.get(0);
        pexpressionlNode3 = (PExpressionL)nodeArrayList2.get(0);
        tkeydoNode4 = (TKeyDo)nodeArrayList3.get(0);
        pstatementelseNode5 = (PStatementElse)nodeArrayList4.get(0);

        pwhilestmtelseNode1 = new AWhileStmtElse(tkeywhileNode2, pexpressionlNode3, tkeydoNode4, pstatementelseNode5);
        }
	nodeList.add(pwhilestmtelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKeyChar tkeycharNode2;
        tkeycharNode2 = (TKeyChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tkeycharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TKeyInt tkeyintNode2;
        tkeyintNode2 = (TKeyInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tkeyintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ADataReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        preturntypeNode1 = new ADataReturnType(pdatatypeNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANothingReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TKeyNothing tkeynothingNode2;
        tkeynothingNode2 = (TKeyNothing)nodeArrayList1.get(0);

        preturntypeNode1 = new ANothingReturnType(tkeynothingNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AArrayNoDim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayNoDim parraynodimNode1;
        {
            // Block
        TSepLbrack tseplbrackNode2;
        TSepRbrack tseprbrackNode3;
        tseplbrackNode2 = (TSepLbrack)nodeArrayList1.get(0);
        tseprbrackNode3 = (TSepRbrack)nodeArrayList2.get(0);

        parraynodimNode1 = new AArrayNoDim(tseplbrackNode2, tseprbrackNode3);
        }
	nodeList.add(parraynodimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AArrayDim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayDim parraydimNode1;
        {
            // Block
        TSepLbrack tseplbrackNode2;
        TInteger tintegerNode3;
        TSepRbrack tseprbrackNode4;
        tseplbrackNode2 = (TSepLbrack)nodeArrayList1.get(0);
        tintegerNode3 = (TInteger)nodeArrayList2.get(0);
        tseprbrackNode4 = (TSepRbrack)nodeArrayList3.get(0);

        parraydimNode1 = new AArrayDim(tseplbrackNode2, tintegerNode3, tseprbrackNode4);
        }
	nodeList.add(parraydimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AAvardef1VarDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TKeyVar tkeyvarNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSepColon tsepcolonNode5;
        PType ptypeNode6;
        TSepSemi tsepsemiNode7;
        tkeyvarNode2 = (TKeyVar)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        tsepcolonNode5 = (TSepColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsepsemiNode7 = (TSepSemi)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef(tkeyvarNode2, tidentifierNode3, listNode4, tsepcolonNode5, ptypeNode6, tsepsemiNode7);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAvardef2VarDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TKeyVar tkeyvarNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSepColon tsepcolonNode6;
        PType ptypeNode7;
        TSepSemi tsepsemiNode8;
        tkeyvarNode2 = (TKeyVar)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tsepcolonNode6 = (TSepColon)nodeArrayList4.get(0);
        ptypeNode7 = (PType)nodeArrayList5.get(0);
        tsepsemiNode8 = (TSepSemi)nodeArrayList6.get(0);

        pvardefNode1 = new AVarDef(tkeyvarNode2, tidentifierNode3, listNode5, tsepcolonNode6, ptypeNode7, tsepsemiNode8);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AVarMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarMore pvarmoreNode1;
        {
            // Block
        TSepComma tsepcommaNode2;
        TIdentifier tidentifierNode3;
        tsepcommaNode2 = (TSepComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pvarmoreNode1 = new AVarMore(tsepcommaNode2, tidentifierNode3);
        }
	nodeList.add(pvarmoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayNoDim parraynodimNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraynodimNode3 = (PArrayNoDim)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, parraynodimNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PArrayNoDim parraynodimNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        parraynodimNode3 = (PArrayNoDim)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, parraynodimNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSepColon tsepcolonNode5;
        PFparType pfpartypeNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        tsepcolonNode5 = (TSepColon)nodeArrayList2.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList3.get(0);

        pfpardefNode1 = new AFparDef(null, tidentifierNode3, listNode4, tsepcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TKeyRef tkeyrefNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TSepColon tsepcolonNode5;
        PFparType pfpartypeNode6;
        tkeyrefNode2 = (TKeyRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        tsepcolonNode5 = (TSepColon)nodeArrayList3.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(tkeyrefNode2, tidentifierNode3, listNode4, tsepcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAfpardef3FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSepColon tsepcolonNode6;
        PFparType pfpartypeNode7;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tsepcolonNode6 = (TSepColon)nodeArrayList3.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(null, tidentifierNode3, listNode5, tsepcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAfpardef4FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TKeyRef tkeyrefNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSepColon tsepcolonNode6;
        PFparType pfpartypeNode7;
        tkeyrefNode2 = (TKeyRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tsepcolonNode6 = (TSepColon)nodeArrayList4.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList5.get(0);

        pfpardefNode1 = new AFparDef(tkeyrefNode2, tidentifierNode3, listNode5, tsepcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AParMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParMore pparmoreNode1;
        {
            // Block
        TSepComma tsepcommaNode2;
        TIdentifier tidentifierNode3;
        tsepcommaNode2 = (TSepComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparmoreNode1 = new AParMore(tsepcommaNode2, tidentifierNode3);
        }
	nodeList.add(pparmoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKeyFun tkeyfunNode2;
        TIdentifier tidentifierNode3;
        TSepLpar tseplparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TSepRpar tseprparNode6;
        TSepColon tsepcolonNode7;
        PReturnType preturntypeNode8;
        tkeyfunNode2 = (TKeyFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tseplparNode4 = (TSepLpar)nodeArrayList3.get(0);
        tseprparNode6 = (TSepRpar)nodeArrayList4.get(0);
        tsepcolonNode7 = (TSepColon)nodeArrayList5.get(0);
        preturntypeNode8 = (PReturnType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tkeyfunNode2, tidentifierNode3, tseplparNode4, null, tseprparNode6, tsepcolonNode7, preturntypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TKeyFun tkeyfunNode2;
        TIdentifier tidentifierNode3;
        TSepLpar tseplparNode4;
        PFuncParams pfuncparamsNode5;
        TSepRpar tseprparNode6;
        TSepColon tsepcolonNode7;
        PReturnType preturntypeNode8;
        tkeyfunNode2 = (TKeyFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tseplparNode4 = (TSepLpar)nodeArrayList3.get(0);
        pfuncparamsNode5 = (PFuncParams)nodeArrayList4.get(0);
        tseprparNode6 = (TSepRpar)nodeArrayList5.get(0);
        tsepcolonNode7 = (TSepColon)nodeArrayList6.get(0);
        preturntypeNode8 = (PReturnType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tkeyfunNode2, tidentifierNode3, tseplparNode4, pfuncparamsNode5, tseprparNode6, tsepcolonNode7, preturntypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAfuncparams1FuncParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncParams pfuncparamsNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        }

        pfuncparamsNode1 = new AFuncParams(pfpardefNode2, listNode3);
        }
	nodeList.add(pfuncparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AAfuncparams2FuncParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncParams pfuncparamsNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfuncparamsNode1 = new AFuncParams(pfpardefNode2, listNode4);
        }
	nodeList.add(pfuncparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AFparDefMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDefMore pfpardefmoreNode1;
        {
            // Block
        TSepSemi tsepsemiNode2;
        PFparDef pfpardefNode3;
        tsepsemiNode2 = (TSepSemi)nodeArrayList1.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList2.get(0);

        pfpardefmoreNode1 = new AFparDefMore(tsepsemiNode2, pfpardefNode3);
        }
	nodeList.add(pfpardefmoreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSepSemi tsepsemiNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsepsemiNode3 = (TSepSemi)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tsepsemiNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBlockStmt pblockstmtNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockstmtNode4 = (PBlockStmt)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockstmtNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBlockStmt pblockstmtNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockstmtNode5 = (PBlockStmt)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockstmtNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AFuncLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AFuncDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AVarLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATerminal$FunctionArgsMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunctionArgsMore pfunctionargsmoreNode1;
        pfunctionargsmoreNode1 = (PFunctionArgsMore)nodeArrayList1.get(0);
	if(pfunctionargsmoreNode1 != null)
	{
	  listNode2.add(pfunctionargsmoreNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANonTerminal$FunctionArgsMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunctionArgsMore pfunctionargsmoreNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctionargsmoreNode2 = (PFunctionArgsMore)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionargsmoreNode2 != null)
	{
	  listNode3.add(pfunctionargsmoreNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ATerminal$ArrayDim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayDim parraydimNode1;
        parraydimNode1 = (PArrayDim)nodeArrayList1.get(0);
	if(parraydimNode1 != null)
	{
	  listNode2.add(parraydimNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ANonTerminal$ArrayDim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayDim parraydimNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraydimNode2 = (PArrayDim)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraydimNode2 != null)
	{
	  listNode3.add(parraydimNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ATerminal$VarMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarMore pvarmoreNode1;
        pvarmoreNode1 = (PVarMore)nodeArrayList1.get(0);
	if(pvarmoreNode1 != null)
	{
	  listNode2.add(pvarmoreNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ANonTerminal$VarMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarMore pvarmoreNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarmoreNode2 = (PVarMore)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarmoreNode2 != null)
	{
	  listNode3.add(pvarmoreNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ATerminal$ParMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParMore pparmoreNode1;
        pparmoreNode1 = (PParMore)nodeArrayList1.get(0);
	if(pparmoreNode1 != null)
	{
	  listNode2.add(pparmoreNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANonTerminal$ParMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParMore pparmoreNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparmoreNode2 = (PParMore)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparmoreNode2 != null)
	{
	  listNode3.add(pparmoreNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATerminal$FparDefMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFparDefMore pfpardefmoreNode1;
        pfpardefmoreNode1 = (PFparDefMore)nodeArrayList1.get(0);
	if(pfpardefmoreNode1 != null)
	{
	  listNode2.add(pfpardefmoreNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonTerminal$FparDefMore */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFparDefMore pfpardefmoreNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpardefmoreNode2 = (PFparDefMore)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpardefmoreNode2 != null)
	{
	  listNode3.add(pfpardefmoreNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {8, SHIFT, 1}, },
			{{-1, ERROR, 1}, {36, SHIFT, 5}, },
			{{-1, ERROR, 2}, {41, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 6}, {8, SHIFT, 1}, {30, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 5}, {26, SHIFT, 15}, },
			{{-1, ERROR, 6}, {36, SHIFT, 16}, },
			{{-1, ERROR, 7}, {3, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {30, SHIFT, 7}, {31, SHIFT, 20}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 10}, {0, SHIFT, 6}, {8, SHIFT, 1}, {30, SHIFT, 7}, {34, SHIFT, 35}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 14}, {0, SHIFT, 6}, {8, SHIFT, 1}, {30, SHIFT, 7}, },
			{{-1, ERROR, 15}, {9, SHIFT, 38}, {27, SHIFT, 39}, {36, SHIFT, 40}, },
			{{-1, ERROR, 16}, {32, SHIFT, 43}, {33, SHIFT, 44}, },
			{{-1, ERROR, 17}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 18}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 19}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {34, SHIFT, 63}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 17}, {26, SHIFT, 65}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 24}, {28, SHIFT, 66}, {35, SHIFT, 67}, },
			{{-1, ERROR, 25}, {34, SHIFT, 68}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 34}, {3, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {30, SHIFT, 7}, {31, SHIFT, 69}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 38}, {36, SHIFT, 71}, },
			{{-1, ERROR, 39}, {33, SHIFT, 72}, },
			{{-1, ERROR, 40}, {32, SHIFT, 73}, {33, SHIFT, 74}, },
			{{-1, REDUCE, 83}, {34, SHIFT, 77}, },
			{{-1, ERROR, 42}, {27, SHIFT, 80}, },
			{{-1, ERROR, 43}, {36, SHIFT, 81}, },
			{{-1, ERROR, 44}, {1, SHIFT, 82}, {2, SHIFT, 83}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 46}, {32, SHIFT, 43}, {33, SHIFT, 86}, },
			{{-1, ERROR, 47}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 48}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 49}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 50}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 53}, {12, SHIFT, 93}, {13, SHIFT, 94}, {17, SHIFT, 95}, {18, SHIFT, 96}, {19, SHIFT, 97}, {20, SHIFT, 98}, {21, SHIFT, 99}, {22, SHIFT, 100}, },
			{{-1, REDUCE, 3}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 13}, {28, SHIFT, 66}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 58}, {4, SHIFT, 104}, {24, SHIFT, 105}, },
			{{-1, REDUCE, 24}, {23, SHIFT, 106}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 61}, {7, SHIFT, 107}, {24, SHIFT, 105}, },
			{{-1, ERROR, 62}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 64}, {12, SHIFT, 93}, {13, SHIFT, 94}, {34, SHIFT, 109}, },
			{{-1, ERROR, 65}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {27, SHIFT, 110}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 66}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 67}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 71}, {32, SHIFT, 73}, {33, SHIFT, 115}, },
			{{-1, ERROR, 72}, {1, SHIFT, 82}, {2, SHIFT, 83}, {10, SHIFT, 117}, },
			{{-1, ERROR, 73}, {36, SHIFT, 120}, },
			{{-1, ERROR, 74}, {1, SHIFT, 82}, {2, SHIFT, 83}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 76}, {32, SHIFT, 73}, {33, SHIFT, 123}, },
			{{-1, ERROR, 77}, {9, SHIFT, 38}, {36, SHIFT, 40}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 84}, {34, SHIFT, 77}, },
			{{-1, ERROR, 80}, {33, SHIFT, 127}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 67}, {28, SHIFT, 128}, },
			{{-1, ERROR, 85}, {34, SHIFT, 131}, },
			{{-1, ERROR, 86}, {1, SHIFT, 82}, {2, SHIFT, 83}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 91}, {12, SHIFT, 93}, {13, SHIFT, 94}, {17, SHIFT, 95}, {18, SHIFT, 96}, {19, SHIFT, 97}, {20, SHIFT, 98}, {21, SHIFT, 99}, {22, SHIFT, 100}, {27, SHIFT, 133}, },
			{{-1, ERROR, 92}, {24, SHIFT, 105}, {27, SHIFT, 134}, },
			{{-1, ERROR, 93}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 94}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 95}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 96}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 97}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 98}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 99}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 100}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 101}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 102}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 103}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 104}, {3, SHIFT, 146}, {6, SHIFT, 147}, {11, SHIFT, 19}, {30, SHIFT, 7}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, ERROR, 105}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 106}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 107}, {3, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {30, SHIFT, 7}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, ERROR, 108}, {12, SHIFT, 93}, {13, SHIFT, 94}, {27, SHIFT, 133}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 20}, {12, SHIFT, 93}, {13, SHIFT, 94}, {32, SHIFT, 160}, },
			{{-1, ERROR, 112}, {27, SHIFT, 163}, },
			{{-1, ERROR, 113}, {12, SHIFT, 93}, {13, SHIFT, 94}, {29, SHIFT, 164}, },
			{{-1, ERROR, 114}, {12, SHIFT, 93}, {13, SHIFT, 94}, {34, SHIFT, 165}, },
			{{-1, ERROR, 115}, {1, SHIFT, 82}, {2, SHIFT, 83}, },
			{{-1, ERROR, 116}, {32, SHIFT, 73}, {33, SHIFT, 167}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 72}, {28, SHIFT, 168}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 123}, {1, SHIFT, 82}, {2, SHIFT, 83}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 127}, {1, SHIFT, 82}, {2, SHIFT, 83}, {10, SHIFT, 117}, },
			{{-1, ERROR, 128}, {37, SHIFT, 173}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 68}, {28, SHIFT, 128}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 132}, {34, SHIFT, 175}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 1}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 2}, {14, SHIFT, 101}, {15, SHIFT, 102}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 29}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 30}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 32}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 31}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 34}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 33}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 146}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, ERROR, 147}, {12, SHIFT, 47}, {13, SHIFT, 48}, {25, SHIFT, 49}, {26, SHIFT, 50}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 149}, {5, SHIFT, 178}, },
			{{-1, REDUCE, 35}, {5, REDUCE, 42}, },
			{{-1, REDUCE, 36}, {5, REDUCE, 43}, },
			{{-1, REDUCE, 37}, {5, REDUCE, 44}, },
			{{-1, REDUCE, 38}, {5, REDUCE, 45}, },
			{{-1, REDUCE, 39}, {5, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 23}, {23, SHIFT, 106}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 160}, {12, SHIFT, 47}, {13, SHIFT, 48}, {26, SHIFT, 62}, {36, SHIFT, 22}, {37, SHIFT, 51}, {39, SHIFT, 52}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 21}, {32, SHIFT, 160}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 167}, {1, SHIFT, 82}, {2, SHIFT, 83}, },
			{{-1, ERROR, 168}, {29, SHIFT, 182}, {37, SHIFT, 173}, },
			{{-1, REDUCE, 73}, {28, SHIFT, 128}, },
			{{-1, REDUCE, 74}, {28, SHIFT, 128}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 173}, {29, SHIFT, 184}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 176}, {4, SHIFT, 185}, {24, SHIFT, 105}, },
			{{-1, ERROR, 177}, {7, SHIFT, 186}, {24, SHIFT, 105}, },
			{{-1, ERROR, 178}, {3, SHIFT, 17}, {6, SHIFT, 18}, {11, SHIFT, 19}, {30, SHIFT, 7}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 22}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 75}, {28, SHIFT, 128}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 185}, {3, SHIFT, 146}, {6, SHIFT, 147}, {11, SHIFT, 19}, {30, SHIFT, 7}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, ERROR, 186}, {3, SHIFT, 146}, {6, SHIFT, 147}, {11, SHIFT, 19}, {30, SHIFT, 7}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 188}, {5, SHIFT, 190}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 190}, {3, SHIFT, 146}, {6, SHIFT, 147}, {11, SHIFT, 19}, {30, SHIFT, 7}, {34, SHIFT, 21}, {36, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 58}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 53}, {19, 64}, {50, 91}, {62, 108}, {65, 111}, {66, 113}, {67, 114}, {95, 137}, {96, 138}, {97, 139}, {98, 140}, {99, 141}, {100, 142}, {160, 179}, },
			{{-1, 54}, {93, 135}, {94, 136}, },
			{{-1, 55}, {47, 88}, {48, 89}, {101, 143}, {102, 144}, {103, 145}, },
			{{-1, 56}, {7, 24}, {34, 24}, {104, 24}, {107, 24}, {178, 24}, {185, 24}, {186, 24}, {190, 24}, },
			{{-1, 57}, {7, 25}, {34, 25}, {104, 25}, {107, 25}, {178, 25}, {185, 25}, {186, 25}, {190, 25}, },
			{{-1, 112}, },
			{{-1, 161}, {162, 180}, },
			{{-1, 58}, {18, 61}, {50, 92}, {146, 176}, {147, 177}, },
			{{-1, 59}, {105, 157}, },
			{{-1, 60}, {49, 90}, {106, 158}, },
			{{-1, 148}, {7, 26}, {34, 70}, {107, 159}, {178, 187}, {186, 159}, {190, 187}, },
			{{-1, 149}, {185, 188}, {186, 189}, {190, 191}, },
			{{-1, 27}, {104, 150}, {185, 150}, {186, 150}, {190, 150}, },
			{{-1, 28}, {104, 151}, {185, 151}, {186, 151}, {190, 151}, },
			{{-1, 29}, {3, 8}, {10, 8}, {14, 36}, {104, 152}, {185, 152}, {186, 152}, {190, 152}, },
			{{-1, 30}, {104, 153}, {185, 153}, {186, 153}, {190, 153}, },
			{{-1, 31}, {104, 154}, {185, 154}, {186, 154}, {190, 154}, },
			{{-1, 32}, },
			{{-1, 155}, },
			{{-1, 33}, },
			{{-1, 156}, },
			{{-1, 121}, {44, 84}, {72, 118}, {86, 84}, {127, 118}, },
			{{-1, 119}, {127, 172}, },
			{{-1, 169}, },
			{{-1, 129}, {130, 174}, {170, 174}, {183, 174}, },
			{{-1, 85}, {86, 132}, },
			{{-1, 9}, },
			{{-1, 45}, {46, 87}, },
			{{-1, 122}, {115, 166}, {123, 171}, {167, 181}, },
			{{-1, 41}, {77, 125}, },
			{{-1, 75}, {76, 124}, {116, 124}, },
			{{-1, 10}, {0, 3}, },
			{{-1, 42}, },
			{{-1, 78}, {79, 126}, },
			{{-1, 11}, },
			{{-1, 12}, {0, 4}, },
			{{-1, 13}, {14, 37}, },
			{{-1, 162}, },
			{{-1, 34}, },
			{{-1, 130}, {121, 170}, {169, 183}, },
			{{-1, 46}, },
			{{-1, 76}, {71, 116}, },
			{{-1, 79}, },
			{{-1, 14}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'var', 'fun', '{'",
			"expecting: '('",
			"expecting: 'if', 'while', 'return', '{', '}', ';', identifier, string",
			"expecting: 'var', 'fun', '{', EOF",
			"expecting: 'var', 'fun', '{', ';'",
			"expecting: 'ref', ')', identifier",
			"expecting: ',', ':'",
			"expecting: '+', '-', 'not', '(', identifier, integer, character, string",
			"expecting: '+', '-', '(', ';', identifier, integer, character, string",
			"expecting: 'var', 'if', 'else', 'while', 'fun', 'return', '{', '}', ';', identifier, string, EOF",
			"expecting: 'if', 'else', 'while', 'return', '{', '}', ';', identifier, string",
			"expecting: 'then', 'do', '+', '-', '*', 'div', 'mod', '=', '#', '<', '>', '<=', '>=', 'and', 'or', '(', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'then', 'do', '+', '-', '*', 'div', 'mod', '=', '#', '<', '>', '<=', '>=', 'and', 'or', ')', '[', ']', ',', ';', '<-'",
			"expecting: '[', '<-'",
			"expecting: ';'",
			"expecting: ':'",
			"expecting: ')', ';'",
			"expecting: ')'",
			"expecting: 'char', 'int'",
			"expecting: '+', '-', '(', identifier, integer, character, string",
			"expecting: 'then', 'do', '+', '-', '*', 'div', 'mod', '=', '#', '<', '>', '<=', '>=', 'and', 'or', ')', ']', ',', ';'",
			"expecting: '+', '-', '=', '#', '<', '>', '<=', '>='",
			"expecting: 'then', 'do', '+', '-', '*', 'div', 'mod', '=', '#', '<', '>', '<=', '>=', 'and', 'or', ')', '[', ']', ',', ';'",
			"expecting: 'then', 'or'",
			"expecting: 'then', 'do', 'and', 'or', ')'",
			"expecting: 'do', 'or'",
			"expecting: '+', '-', ';'",
			"expecting: '+', '-', '(', ')', identifier, integer, character, string",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', identifier",
			"expecting: 'var', 'fun', ')', '[', '{', ';'",
			"expecting: '[', ';'",
			"expecting: '+', '-', '=', '#', '<', '>', '<=', '>=', ')'",
			"expecting: 'or', ')'",
			"expecting: 'if', 'while', 'return', '{', ';', identifier, string",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', ','",
			"expecting: '+', '-', ']'",
			"expecting: ')', '[', ';'",
			"expecting: integer",
			"expecting: 'then', 'do', '+', '-', 'and', 'or', ')'",
			"expecting: 'else'",
			"expecting: ')', ','",
			"expecting: ']', integer",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 4, 1, 5, 6, 3, 7, 3, 3, 3, 3, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 6, 3, 1, 18, 9, 19, 20, 1, 21, 9, 9, 22, 22, 10, 10, 23, 23, 24, 23, 23, 25, 23, 26, 27, 27, 28, 22, 13, 29, 30, 22, 22, 13, 12, 5, 9, 31, 1, 21, 9, 9, 32, 19, 19, 18, 9, 33, 33, 34, 17, 21, 9, 23, 23, 27, 35, 36, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 37, 10, 10, 37, 38, 13, 23, 39, 20, 40, 29, 21, 9, 7, 7, 7, 9, 41, 19, 21, 9, 19, 19, 31, 42, 41, 34, 3, 17, 23, 27, 23, 23, 43, 43, 43, 43, 43, 43, 23, 23, 23, 10, 10, 5, 44, 13, 13, 13, 13, 13, 44, 44, 27, 27, 5, 22, 45, 45, 23, 15, 13, 19, 21, 46, 41, 41, 19, 7, 47, 41, 3, 26, 28, 37, 39, 45, 19, 41, 41, 41, 37, 37, 5, 44, 44, 37, 44, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
