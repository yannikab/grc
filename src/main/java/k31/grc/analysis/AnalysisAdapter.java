/* This file was generated by SableCC (http://www.sablecc.org/). */

package k31.grc.analysis;

import java.util.*;
import k31.grc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseTCommentSwitch(TCommentSwitch node)
    {
        defaultCase(node);
    }

    public void caseTCommentContent(TCommentContent node)
    {
        defaultCase(node);
    }

    public void caseTKeyAnd(TKeyAnd node)
    {
        defaultCase(node);
    }

    public void caseTKeyChar(TKeyChar node)
    {
        defaultCase(node);
    }

    public void caseTKeyDiv(TKeyDiv node)
    {
        defaultCase(node);
    }

    public void caseTKeyDo(TKeyDo node)
    {
        defaultCase(node);
    }

    public void caseTKeyElse(TKeyElse node)
    {
        defaultCase(node);
    }

    public void caseTKeyFun(TKeyFun node)
    {
        defaultCase(node);
    }

    public void caseTKeyIf(TKeyIf node)
    {
        defaultCase(node);
    }

    public void caseTKeyInt(TKeyInt node)
    {
        defaultCase(node);
    }

    public void caseTKeyMod(TKeyMod node)
    {
        defaultCase(node);
    }

    public void caseTKeyNot(TKeyNot node)
    {
        defaultCase(node);
    }

    public void caseTKeyNothing(TKeyNothing node)
    {
        defaultCase(node);
    }

    public void caseTKeyOr(TKeyOr node)
    {
        defaultCase(node);
    }

    public void caseTKeyRef(TKeyRef node)
    {
        defaultCase(node);
    }

    public void caseTKeyReturn(TKeyReturn node)
    {
        defaultCase(node);
    }

    public void caseTKeyThen(TKeyThen node)
    {
        defaultCase(node);
    }

    public void caseTKeyVar(TKeyVar node)
    {
        defaultCase(node);
    }

    public void caseTKeyWhile(TKeyWhile node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTConstInt(TConstInt node)
    {
        defaultCase(node);
    }

    public void caseTConstChar(TConstChar node)
    {
        defaultCase(node);
    }

    public void caseTConstString(TConstString node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpan(TWhiteSpan node)
    {
        defaultCase(node);
    }

    public void caseTCommentLine(TCommentLine node)
    {
        defaultCase(node);
    }

    public void caseTCommentSpan(TCommentSpan node)
    {
        defaultCase(node);
    }

    public void caseTOperPlus(TOperPlus node)
    {
        defaultCase(node);
    }

    public void caseTOperMinus(TOperMinus node)
    {
        defaultCase(node);
    }

    public void caseTOperMult(TOperMult node)
    {
        defaultCase(node);
    }

    public void caseTOperDiv(TOperDiv node)
    {
        defaultCase(node);
    }

    public void caseTOperHash(TOperHash node)
    {
        defaultCase(node);
    }

    public void caseTOperEq(TOperEq node)
    {
        defaultCase(node);
    }

    public void caseTOperNe(TOperNe node)
    {
        defaultCase(node);
    }

    public void caseTOperLt(TOperLt node)
    {
        defaultCase(node);
    }

    public void caseTOperGt(TOperGt node)
    {
        defaultCase(node);
    }

    public void caseTOperLe(TOperLe node)
    {
        defaultCase(node);
    }

    public void caseTOperGe(TOperGe node)
    {
        defaultCase(node);
    }

    public void caseTSepLpar(TSepLpar node)
    {
        defaultCase(node);
    }

    public void caseTSepRpar(TSepRpar node)
    {
        defaultCase(node);
    }

    public void caseTSepLbrack(TSepLbrack node)
    {
        defaultCase(node);
    }

    public void caseTSepRbrack(TSepRbrack node)
    {
        defaultCase(node);
    }

    public void caseTSepLbrace(TSepLbrace node)
    {
        defaultCase(node);
    }

    public void caseTSepRbrace(TSepRbrace node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
