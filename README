<TL;DR>
1) Place code files in a directory under code/
2) Run /scripts/allexec.sh to produce executables for all code files
3) Run /scripts/allexecil.sh to disassemble executables to symbolic CIL
4) 02-cil/ can be removed from exclude.cfg to compile the code files already included
</TL;DR>


Environment configuration:

scripts/grc.cfg
scripts/exclude.cfg contains directories under code/ to exclude from processing


Building:

$ ./scripts/build.sh
$ ./scripts/clean.sh


After building, compiler can be executed using grc wrapper script under scripts/ directory:

$ cd scripts
$ ./grc


For help:

$ ./grc help


Tools:

under /tools directory

  ildasm.exe : outputs CIL code for given executable
  ilasm.exe : compiles a CIL symbolic code file into an executable
  peverify.exe : verifies the structure of a given executable

    peverify.exe will emit warnings of two types for the most part:

    a) [IL]: Error: [hanoi.exe : hanoi._::_puts][offset 0x00000000] Unmanaged pointers are not a verifiable type.
       This warning is due to the use of unmanaged pointers for array and array element addresses.

    b) [IL]: Error: [hanoi.exe : hanoi._::_puts][offset 0x0000000A][found ref array mdarray 'System.Byte[]']
       [expected unmanaged pointer] Unexpected type on the stack.
       This warning is due to the forceful conversion of arrays to unmanaged pointers.


Helper scripts:

The first three scripts have module and action settings. Running grc help should clarify things.

exec.sh         Executes grc with a single *.grc file argument
exectxt.sh      Executes grc with a single *.grc file argument and dumps output in a .txt file
execgv.sh       Executes grc with a single *.grc file argument and creates a graphviz .png file

fexec.sh        Executes exec.sh for all *.grc files in its directory argument
fexectxt.sh     Executes exectxt.sh for all *.grc files in its directory argument
fexecgv.sh      Executes execgv.sh for all *.grc files in its directory argument

allexec.sh      Executes fexec.sh for each subdirectory of code/ directory
allexectxt.sh   Executes fexectxt.sh for each subdirectory of code/ directory
allexecgv.sh    Executes fexecgv.sh for each subdirectory of code/ directory


Examples:

./grc code src ../code/01-tac/00-examples/hanoi.grc    outputs formatted source code for file

./exec.sh ../code/01-tac/00-examples/hanoi.grc         executes action in exec.sh on parameter

./fexec.sh ../code/01-tac/00-examples/                 executes exec.sh action on all files in dir

./allexec.sh                                           executes exec.sh action on all files in code/


Stage abbreviations:

Cst: Concrete syntax tree
Ast: Abstract syntax tree
Sem: Semantic analysis/Type checking
Tac: Three address code intermediate representation
Cil: Target code generation (Common Intermediate Language)


Internals:

One can see the compiler at work under the notes/ directory.
